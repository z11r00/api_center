{
    "props": {
        "pageProps": {
            "query": {
                "id": "ff43e5b5002d4e78afc128c7f2b7c961"
            },
            "ieBrowser": false,
            "needRefresh": false,
            "writingDetail": {
                "id": 83201,
                "outId": "ff43e5b5002d4e78afc128c7f2b7c961",
                "articleOutId": "ff43e5b5002d4e78afc128c7f2b7c961",
                "html": "<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">承接上文，本篇我们深入源码层面，看下Spring是如何实现AOP的。</p> \n<h2 data-tool=\"mdnice编辑器\" style=\"border-bottom-color: rgb(239, 112, 96); margin-top: 30px; margin-bottom: 15px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; align-items: unset; background-attachment: scroll; background-clip: border-box; background-color: unset; background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; border-top-style: none; border-bottom-style: solid; border-left-style: none; border-right-style: none; border-top-width: 1px; border-bottom-width: 2px; border-left-width: 1px; border-right-width: 1px; border-top-color: rgb(0, 0, 0); border-left-color: rgb(0, 0, 0); border-right-color: rgb(0, 0, 0); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-left-radius: 0px; border-bottom-right-radius: 0px; box-shadow: none; display: flex; flex-direction: unset; float: unset; height: auto; justify-content: unset; line-height: 1.1em; overflow-x: unset; overflow-y: unset; position: relative; text-align: left; text-shadow: none; transform: none; width: auto; -webkit-box-reflect: unset;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"font-size: 22px; color: rgb(255, 255, 255); background-color: rgb(239, 112, 96); line-height: 1.5em; letter-spacing: 0em; align-items: unset; background-attachment: scroll; background-clip: border-box; background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-right-width: 1px; border-top-color: rgb(0, 0, 0); border-bottom-color: rgb(0, 0, 0); border-left-color: rgb(0, 0, 0); border-right-color: rgb(0, 0, 0); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-left-radius: 0px; border-bottom-right-radius: 0px; box-shadow: none; display: inline-block; font-weight: bold; flex-direction: unset; float: unset; height: auto; justify-content: unset; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 5px; overflow-x: unset; overflow-y: unset; padding-top: 3px; padding-bottom: 1px; padding-left: 10px; padding-right: 10px; position: relative; text-align: left; text-indent: 0em; text-shadow: none; transform: none; width: auto; -webkit-box-reflect: unset;\">一、示例代码</span><span class=\"suffix\" style=\"display: none;\"></span><span style=\"border-bottom-color: rgb(239, 235, 233); align-items: unset; background-attachment: scroll; background-clip: border-box; background-color: unset; background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; border-top-style: none; border-bottom-style: solid; border-left-style: none; border-right-style: solid; border-top-width: 1px; border-bottom-width: 36px; border-left-width: 1px; border-right-width: 20px; border-top-color: rgb(0, 0, 0); border-left-color: rgb(0, 0, 0); border-right-color: transparent; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-left-radius: 0px; border-bottom-right-radius: 0px; box-shadow: none; color: rgb(0, 0, 0); display: inline-block; font-size: 16px; font-weight: bold; flex-direction: unset; float: unset; height: auto; justify-content: unset; letter-spacing: 0px; line-height: 1.1em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; overflow-x: unset; overflow-y: unset; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; position: relative; text-align: left; text-indent: 0em; text-shadow: none; transform: none; width: auto; -webkit-box-reflect: unset;\"> </span></h2> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">先从一段简单的示例代码入手。如下</p> \n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left; margin-top: 10px; margin-bottom: 10px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; padding-top: 15px; background: #282c34; border-radius: 5px; display: -webkit-box; font-family: Consolas, Monaco, Menlo, monospace; font-size: 12px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">TestBean</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">test</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"test\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br><br><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;定义一个切面</span><br><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;使用AspectJ的语法，告诉spring这是一个切面，切面包含了一些增强的规则</span><br><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;1.哪些需要增强</span><br><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;2.如何增强</span><br><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;3.什么时机增强（before、after、around、throwException）</span><br><span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Aspect</span><br><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">AspectJTest</span>&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Pointcut</span>(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"execution(*&nbsp;*.test(..))\"</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">test</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Before</span>(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"test()\"</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">beforeTest</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"beforeTest\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@After</span>(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"test()\"</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">afterTest</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"afterTest\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Around</span>(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"test()\"</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;Object&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">aroundTest</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(ProceedingJoinPoint&nbsp;p)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"before1\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Object&nbsp;o&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">try</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;o&nbsp;=&nbsp;p.proceed();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">catch</span>&nbsp;(Throwable&nbsp;e)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.printStackTrace();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"after1\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;o;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br><br><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">main</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String[]&nbsp;args)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;ClassPathXmlApplicationContext&nbsp;application&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;ClassPathXmlApplicationContext(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"xiaokui1/xiaokui.xml\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;TestBean&nbsp;testBean&nbsp;=&nbsp;(TestBean)application.getBean(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"testBean\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;testBean.test();<br>}<br><br><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;省略输出</span><br></code></pre> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">配置文件如下</p> \n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left; margin-top: 10px; margin-bottom: 10px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; padding-top: 15px; background: #282c34; border-radius: 5px; display: -webkit-box; font-family: Consolas, Monaco, Menlo, monospace; font-size: 12px;\"><span class=\"hljs-tag\" style=\"line-height: 26px;\">&lt;<span class=\"hljs-name\" style=\"color: #e06c75; line-height: 26px;\">beans</span>&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\" style=\"line-height: 26px;\">&lt;<span class=\"hljs-name\" style=\"color: #e06c75; line-height: 26px;\">aop:aspectj-autoproxy</span>/&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\" style=\"line-height: 26px;\">&lt;<span class=\"hljs-name\" style=\"color: #e06c75; line-height: 26px;\">bean</span>&nbsp;<span class=\"hljs-attr\" style=\"color: #d19a66; line-height: 26px;\">id</span>=<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"testBean\"</span>&nbsp;<span class=\"hljs-attr\" style=\"color: #d19a66; line-height: 26px;\">class</span>=<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"xiaokui1.TestBean\"</span>/&gt;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-tag\" style=\"line-height: 26px;\">&lt;<span class=\"hljs-name\" style=\"color: #e06c75; line-height: 26px;\">bean</span>&nbsp;<span class=\"hljs-attr\" style=\"color: #d19a66; line-height: 26px;\">class</span>=<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"xiaokui1.AspectJTest\"</span>/&gt;</span><br><span class=\"hljs-tag\" style=\"line-height: 26px;\">&lt;/<span class=\"hljs-name\" style=\"color: #e06c75; line-height: 26px;\">beans</span>&gt;</span><br></code></pre> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">这就是Spring AOP带来的神奇功效了。Spring实现了对所有类的test方法进行增加，是辅助功能可以独立于核心业务之外，方便与程序的扩展和解耦。</p> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">那么，Spring究竟是如何实现AOP的呢？首先我们知道，Spring是否支持注解的AOP是由一个配置文件控制的，也就是<code style=\"color: rgb(239, 112, 96); font-size: 14px; line-height: 1.8em; letter-spacing: 0em; background-attachment: scroll; background-clip: border-box; background-color: transparent; background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgb(0, 0, 0); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); overflow-wrap: break-word; padding-top: 2px; padding-right: 4px; padding-bottom: 2px; padding-left: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; margin-top: 0px; margin-right: 2px; margin-bottom: 0px; margin-left: 2px; font-family: 'Operator Mono', Consolas, Monaco, Menlo, monospace; word-break: break-all;\">&lt;aop:aspectj-autoproxy/&gt;</code>，当在配置文件中声明了这句配置的时候，Spring就会支持注解的AOP，那么我们的分析就从这句开始。</p> \n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left; margin-top: 10px; margin-bottom: 10px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; padding-top: 15px; background: #282c34; border-radius: 5px; display: -webkit-box; font-family: Consolas, Monaco, Menlo, monospace; font-size: 12px;\"># /spring-aop/src/main/resources/META-INF/spring.handlers内容如下\n# 相信有之前xml对于自定义标签的加载，看到这里不会陌生\nhttp\\://www.springframework.org/schema/aop=org.springframework.aop.config.AopNamespaceHandler\n</code></pre> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">Ps：新版都是基于注解 <strong style=\"color: rgb(0, 0, 0); font-weight: bold; background-attachment: scroll; background-clip: border-box; background-color: rgba(0, 0, 0, 0); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgba(0, 0, 0, 0.4); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\">@EnableAspectJAutoProxy</strong>，可能很多人对于xml配置方式不是很熟悉了。但鉴于本文写的时间较早（2019年），这里不对注解形式深入展开。</p> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">读者如有兴趣，可以查看Spring源码系列后续相关文章，里面对于对于注解（如**@EnableAsync<strong style=\"color: rgb(0, 0, 0); font-weight: bold; background-attachment: scroll; background-clip: border-box; background-color: rgba(0, 0, 0, 0); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgba(0, 0, 0, 0.4); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\">、</strong>@EnableTransactionManagement<strong style=\"color: rgb(0, 0, 0); font-weight: bold; background-attachment: scroll; background-clip: border-box; background-color: rgba(0, 0, 0, 0); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgba(0, 0, 0, 0.4); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\">、</strong>@EnableCaching**等），有深入讨论。</p> \n<h2 data-tool=\"mdnice编辑器\" style=\"border-bottom-color: rgb(239, 112, 96); margin-top: 30px; margin-bottom: 15px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; align-items: unset; background-attachment: scroll; background-clip: border-box; background-color: unset; background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; border-top-style: none; border-bottom-style: solid; border-left-style: none; border-right-style: none; border-top-width: 1px; border-bottom-width: 2px; border-left-width: 1px; border-right-width: 1px; border-top-color: rgb(0, 0, 0); border-left-color: rgb(0, 0, 0); border-right-color: rgb(0, 0, 0); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-left-radius: 0px; border-bottom-right-radius: 0px; box-shadow: none; display: flex; flex-direction: unset; float: unset; height: auto; justify-content: unset; line-height: 1.1em; overflow-x: unset; overflow-y: unset; position: relative; text-align: left; text-shadow: none; transform: none; width: auto; -webkit-box-reflect: unset;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"font-size: 22px; color: rgb(255, 255, 255); background-color: rgb(239, 112, 96); line-height: 1.5em; letter-spacing: 0em; align-items: unset; background-attachment: scroll; background-clip: border-box; background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-right-width: 1px; border-top-color: rgb(0, 0, 0); border-bottom-color: rgb(0, 0, 0); border-left-color: rgb(0, 0, 0); border-right-color: rgb(0, 0, 0); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-left-radius: 0px; border-bottom-right-radius: 0px; box-shadow: none; display: inline-block; font-weight: bold; flex-direction: unset; float: unset; height: auto; justify-content: unset; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 5px; overflow-x: unset; overflow-y: unset; padding-top: 3px; padding-bottom: 1px; padding-left: 10px; padding-right: 10px; position: relative; text-align: left; text-indent: 0em; text-shadow: none; transform: none; width: auto; -webkit-box-reflect: unset;\">二、寻找代理入口</span><span class=\"suffix\" style=\"display: none;\"></span><span style=\"border-bottom-color: rgb(239, 235, 233); align-items: unset; background-attachment: scroll; background-clip: border-box; background-color: unset; background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; border-top-style: none; border-bottom-style: solid; border-left-style: none; border-right-style: solid; border-top-width: 1px; border-bottom-width: 36px; border-left-width: 1px; border-right-width: 20px; border-top-color: rgb(0, 0, 0); border-left-color: rgb(0, 0, 0); border-right-color: transparent; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-left-radius: 0px; border-bottom-right-radius: 0px; box-shadow: none; color: rgb(0, 0, 0); display: inline-block; font-size: 16px; font-weight: bold; flex-direction: unset; float: unset; height: auto; justify-content: unset; letter-spacing: 0px; line-height: 1.1em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; overflow-x: unset; overflow-y: unset; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; position: relative; text-align: left; text-indent: 0em; text-shadow: none; transform: none; width: auto; -webkit-box-reflect: unset;\"> </span></h2> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">之前讲过Spring中的自定义注解，如果声明了自定义注解，那么就一定会在程序中的某个地方注册了对应的解析器。有如下代码</p> \n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left; margin-top: 10px; margin-bottom: 10px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; padding-top: 15px; background: #282c34; border-radius: 5px; display: -webkit-box; font-family: Consolas, Monaco, Menlo, monospace; font-size: 12px;\"><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;个人网站：xiaokui.site。微信公众号：好看的HK。</span><br><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">AopNamespaceHandler</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">extends</span>&nbsp;<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">NamespaceHandlerSupport</span>&nbsp;</span>{<br><br>&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">init</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;In&nbsp;2.0&nbsp;XSD&nbsp;as&nbsp;well&nbsp;as&nbsp;in&nbsp;2.1&nbsp;XSD.</span><br>&nbsp;&nbsp;registerBeanDefinitionParser(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"config\"</span>,&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;ConfigBeanDefinitionParser());<br>&nbsp;&nbsp;registerBeanDefinitionParser(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"aspectj-autoproxy\"</span>,&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;AspectJAutoProxyBeanDefinitionParser());<br>&nbsp;&nbsp;registerBeanDefinitionDecorator(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"scoped-proxy\"</span>,&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;ScopedProxyBeanDefinitionDecorator());<br><br>&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;Only&nbsp;in&nbsp;2.0&nbsp;XSD:&nbsp;moved&nbsp;to&nbsp;context&nbsp;namespace&nbsp;as&nbsp;of&nbsp;2.1</span><br>&nbsp;&nbsp;registerBeanDefinitionParser(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"spring-configured\"</span>,&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;SpringConfiguredBeanDefinitionParser());<br>&nbsp;}<br>}<br></code></pre> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">由此我们可以得知，在解析配置文件的时候，一旦遇到aspectj-autoproxy配置时就会使用解析器AspectJAutoProxyBeanDefinitionParser进行解析，那么我们来看一看AspectJAutoProxyBeanDefinitionParser的内部实现。</p> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">所有实现BeanDefinitionParser接口的子类，入口都是从parse方法开始的，AspectJAutoProxyBeanDefinitionParser的parse方法如下</p> \n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left; margin-top: 10px; margin-bottom: 10px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; padding-top: 15px; background: #282c34; border-radius: 5px; display: -webkit-box; font-family: Consolas, Monaco, Menlo, monospace; font-size: 12px;\"><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;BeanDefinition&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">parse</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Element&nbsp;element,&nbsp;ParserContext&nbsp;parserContext)</span>&nbsp;</span>{<br>&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;注册AnnotationAwareAspectJAutoProxyCreator&nbsp;</span><br>&nbsp;&nbsp;AopNamespaceUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(parserContext,&nbsp;element);<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;对于注解中子类的处理</span><br>&nbsp;&nbsp;&nbsp;&nbsp;extendBeanDefinition(element,&nbsp;parserContext);<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>;<br>}<br></code></pre> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">其中registerAspectJAnnotationAutoProxyCreatorIfNecessary方法使我们比较关心的，也是关键逻辑的实现。</p> \n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left; margin-top: 10px; margin-bottom: 10px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; padding-top: 15px; background: #282c34; border-radius: 5px; display: -webkit-box; font-family: Consolas, Monaco, Menlo, monospace; font-size: 12px;\"><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;注册AspectJAnnotationAutoProxyCreator</span><br><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">registerAspectJAnnotationAutoProxyCreatorIfNecessary</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ParserContext&nbsp;parserContext,&nbsp;Element&nbsp;sourceElement)</span>&nbsp;</span>{<br>&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;1.注册或升级AutoProxyCreator</span><br>&nbsp;&nbsp;&nbsp;&nbsp;BeanDefinition&nbsp;beanDefinition&nbsp;=&nbsp;AopConfigUtils.registerAspectJAnnotationAutoProxyCreatorIfNecessary(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parserContext.getRegistry(),&nbsp;parserContext.extractSource(sourceElement));<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;2.对于proxy-target-class以及expose-proxy属性的处理</span><br>&nbsp;&nbsp;&nbsp;&nbsp;useClassProxyingIfNecessary(parserContext.getRegistry(),&nbsp;sourceElement);<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;3.注册组件并通知，便于监听器做进一步处理</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;其中beanDefinition的className为AnnotationAwareAspectJAutoProxyCreator</span><br>&nbsp;&nbsp;&nbsp;&nbsp;registerComponentIfNecessary(beanDefinition,&nbsp;parserContext);<br>}<br></code></pre> \n<h2 data-tool=\"mdnice编辑器\" style=\"border-bottom-color: rgb(239, 112, 96); margin-top: 30px; margin-bottom: 15px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; align-items: unset; background-attachment: scroll; background-clip: border-box; background-color: unset; background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; border-top-style: none; border-bottom-style: solid; border-left-style: none; border-right-style: none; border-top-width: 1px; border-bottom-width: 2px; border-left-width: 1px; border-right-width: 1px; border-top-color: rgb(0, 0, 0); border-left-color: rgb(0, 0, 0); border-right-color: rgb(0, 0, 0); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-left-radius: 0px; border-bottom-right-radius: 0px; box-shadow: none; display: flex; flex-direction: unset; float: unset; height: auto; justify-content: unset; line-height: 1.1em; overflow-x: unset; overflow-y: unset; position: relative; text-align: left; text-shadow: none; transform: none; width: auto; -webkit-box-reflect: unset;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"font-size: 22px; color: rgb(255, 255, 255); background-color: rgb(239, 112, 96); line-height: 1.5em; letter-spacing: 0em; align-items: unset; background-attachment: scroll; background-clip: border-box; background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-right-width: 1px; border-top-color: rgb(0, 0, 0); border-bottom-color: rgb(0, 0, 0); border-left-color: rgb(0, 0, 0); border-right-color: rgb(0, 0, 0); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-left-radius: 0px; border-bottom-right-radius: 0px; box-shadow: none; display: inline-block; font-weight: bold; flex-direction: unset; float: unset; height: auto; justify-content: unset; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 5px; overflow-x: unset; overflow-y: unset; padding-top: 3px; padding-bottom: 1px; padding-left: 10px; padding-right: 10px; position: relative; text-align: left; text-indent: 0em; text-shadow: none; transform: none; width: auto; -webkit-box-reflect: unset;\">三、AOP核心实现</span><span class=\"suffix\" style=\"display: none;\"></span><span style=\"border-bottom-color: rgb(239, 235, 233); align-items: unset; background-attachment: scroll; background-clip: border-box; background-color: unset; background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; border-top-style: none; border-bottom-style: solid; border-left-style: none; border-right-style: solid; border-top-width: 1px; border-bottom-width: 36px; border-left-width: 1px; border-right-width: 20px; border-top-color: rgb(0, 0, 0); border-left-color: rgb(0, 0, 0); border-right-color: transparent; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-left-radius: 0px; border-bottom-right-radius: 0px; box-shadow: none; color: rgb(0, 0, 0); display: inline-block; font-size: 16px; font-weight: bold; flex-direction: unset; float: unset; height: auto; justify-content: unset; letter-spacing: 0px; line-height: 1.1em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; overflow-x: unset; overflow-y: unset; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; position: relative; text-align: left; text-indent: 0em; text-shadow: none; transform: none; width: auto; -webkit-box-reflect: unset;\"> </span></h2> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">在 <strong style=\"color: rgb(0, 0, 0); font-weight: bold; background-attachment: scroll; background-clip: border-box; background-color: rgba(0, 0, 0, 0); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgba(0, 0, 0, 0.4); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\">registerAspectJAnnotationAutoProxyCreatorIfNecessary</strong> 方法中主要完成了3件事情，基本每行代码就是一个完整的逻辑。</p> \n<h3 data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; display: block;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"font-size: 20px; color: rgb(0, 0, 0); line-height: 1.5em; letter-spacing: 0em; text-align: left; font-weight: bold; display: block;\">1、准备ProxyCreator</span><span class=\"suffix\" style=\"display: none;\"></span></h3> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">对于AOP的实现，基本上都是靠 <strong style=\"color: rgb(0, 0, 0); font-weight: bold; background-attachment: scroll; background-clip: border-box; background-color: rgba(0, 0, 0, 0); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgba(0, 0, 0, 0.4); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\">AnnotationAwareAspectJAutoProxyCreator</strong> 去完成，它可以根据@Point注解定义的切点来自动代理相匹配的bean。但是为了配置简便，Spring使用了自定义配置来帮助我们自动注册AnnotationAwareAspectJAutoProxyCreator，其注册过程就是在这里实现的。</p> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">为了行文方便，后面 <strong style=\"color: rgb(0, 0, 0); font-weight: bold; background-attachment: scroll; background-clip: border-box; background-color: rgba(0, 0, 0, 0); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgba(0, 0, 0, 0.4); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\">AnnotationAwareAspectJAutoProxyCreator</strong> 简称为 <strong style=\"color: rgb(0, 0, 0); font-weight: bold; background-attachment: scroll; background-clip: border-box; background-color: rgba(0, 0, 0, 0); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgba(0, 0, 0, 0.4); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\">ProxyCreator</strong>。</p> \n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left; margin-top: 10px; margin-bottom: 10px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; padding-top: 15px; background: #282c34; border-radius: 5px; display: -webkit-box; font-family: Consolas, Monaco, Menlo, monospace; font-size: 12px;\"><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">static</span>&nbsp;BeanDefinition&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">registerAspectJAnnotationAutoProxyCreatorIfNecessary</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(BeanDefinitionRegistry&nbsp;registry,&nbsp;Object&nbsp;source)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;registerOrEscalateApcAsRequired(AnnotationAwareAspectJAutoProxyCreator<span class=\"hljs-class\" style=\"line-height: 26px;\">.<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">class</span>,&nbsp;<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">registry</span>,&nbsp;<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">source</span>)</span>;<br>}<br><br><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">static</span>&nbsp;BeanDefinition&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">registerOrEscalateApcAsRequired</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Class&nbsp;cls,&nbsp;BeanDefinitionRegistry&nbsp;registry,&nbsp;Object&nbsp;source)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;Assert.notNull(registry,&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"BeanDefinitionRegistry&nbsp;must&nbsp;not&nbsp;be&nbsp;null\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;如果已经存在了自动代理创建器且存在的自动代理创建器与现在的不一致，那么需要根据优先级来判断</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;值为&nbsp;org.springframework.aop.config.internalAutoProxyCreator</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(registry.containsBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BeanDefinition&nbsp;apcDefinition&nbsp;=&nbsp;registry.getBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(!cls.getName().equals(apcDefinition.getBeanClassName()))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">int</span>&nbsp;currentPriority&nbsp;=&nbsp;findPriorityForClass(apcDefinition.getBeanClassName());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">int</span>&nbsp;requiredPriority&nbsp;=&nbsp;findPriorityForClass(cls);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(currentPriority&nbsp;&lt;&nbsp;requiredPriority)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;升级，改变BeanDefinition最重要的就是改变bean所对应的className属性</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;apcDefinition.setBeanClassName(cls.getName());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;如果已经存在自动代理创建器并且与将要创建的一致，那么无需再次创建</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;返回这个Class的BeanDefinition</span><br>&nbsp;&nbsp;&nbsp;&nbsp;RootBeanDefinition&nbsp;beanDefinition&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;RootBeanDefinition(cls);<br>&nbsp;&nbsp;&nbsp;&nbsp;beanDefinition.setSource(source);<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;这里又set进了一个属性</span><br>&nbsp;&nbsp;&nbsp;&nbsp;beanDefinition.getPropertyValues().add(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"order\"</span>,&nbsp;Ordered.HIGHEST_PRECEDENCE);<br>&nbsp;&nbsp;&nbsp;&nbsp;beanDefinition.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;这一步很关键，</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;其中AUTO_PROXY_CREATOR_BEAN_NAME为&nbsp;org.springframework.aop.config.internalAutoProxyCreator</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;clas为AnnotationAwareAspectJAutoProxyCreator.class，实现了SmartInstantiationAwareBeanPostProcessor接口</span><br>&nbsp;&nbsp;&nbsp;&nbsp;registry.registerBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME,&nbsp;beanDefinition);<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;beanDefinition;<br>}<br></code></pre> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">以上代码实现了自动注册AnnotationAwareAspectJAutoProxyCreator类的功能，同时这里还涉及到了一个优先级的问题，如果已经存在自动代理创建器，而且存在的自动代理创建器与现在的不一致，那么需要根据优先级来判断到底需要使用哪个。</p> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">这里插一句，当我们知道在这里向Spring注册了BeanPostProcessor，下一步我们的关注点<strong style=\"color: rgb(0, 0, 0); font-weight: bold; background-attachment: scroll; background-clip: border-box; background-color: rgba(0, 0, 0, 0); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgba(0, 0, 0, 0.4); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\">就是它对bean施加后处理的规则，即那些bean是需要代理的</strong>。</p> \n<h3 data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; display: block;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"font-size: 20px; color: rgb(0, 0, 0); line-height: 1.5em; letter-spacing: 0em; text-align: left; font-weight: bold; display: block;\">2、设置两个代理配置</span><span class=\"suffix\" style=\"display: none;\"></span></h3> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">暂时先放一放上面的那一个疑问，继续往下。</p> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">useClassProxyingIfNecessary方法实现了proxy-target-class属性以及expose-proxy属性的处理。</p> \n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left; margin-top: 10px; margin-bottom: 10px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; padding-top: 15px; background: #282c34; border-radius: 5px; display: -webkit-box; font-family: Consolas, Monaco, Menlo, monospace; font-size: 12px;\"><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">useClassProxyingIfNecessary</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(BeanDefinitionRegistry&nbsp;registry,&nbsp;Element&nbsp;sourceElement)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(sourceElement&nbsp;!=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;对于proxy-target-class属性的处理</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">boolean</span>&nbsp;proxyTargetClass&nbsp;=&nbsp;Boolean.valueOf(sourceElement.getAttribute(PROXY_TARGET_CLASS_ATTRIBUTE));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(proxyTargetClass)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AopConfigUtils.forceAutoProxyCreatorToUseClassProxying(registry);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;对于expose-proxy属性的处理</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">boolean</span>&nbsp;exposeProxy&nbsp;=&nbsp;Boolean.valueOf(sourceElement.getAttribute(EXPOSE_PROXY_ATTRIBUTE));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(exposeProxy)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AopConfigUtils.forceAutoProxyCreatorToExposeProxy(registry);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br><br><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;反射初始化时，设置默认属性，以让BeanDefinition不会丢失设置属性</span><br><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">forceAutoProxyCreatorToUseClassProxying</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(BeanDefinitionRegistry&nbsp;registry)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(registry.containsBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BeanDefinition&nbsp;definition&nbsp;=&nbsp;registry.getBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;definition.getPropertyValues().add(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"proxyTargetClass\"</span>,&nbsp;Boolean.TRUE);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br><br><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">forceAutoProxyCreatorToExposeProxy</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(BeanDefinitionRegistry&nbsp;registry)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(registry.containsBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BeanDefinition&nbsp;definition&nbsp;=&nbsp;registry.getBeanDefinition(AUTO_PROXY_CREATOR_BEAN_NAME);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;definition.getPropertyValues().add(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"exposeProxy\"</span>,&nbsp;Boolean.TRUE);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br><br><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;除了上述两个属性外exposeProxy、proxyTargetClass，还有order属性，所以当初始化时，会和其他bean表现有点不同，具体表现这populateBean这个阶段</span><br><span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@SuppressWarnings</span>(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"deprecation\"</span>)&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;for&nbsp;postProcessPropertyValues</span><br><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">protected</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">populateBean</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String&nbsp;beanName,&nbsp;RootBeanDefinition&nbsp;mbd,&nbsp;@Nullable&nbsp;BeanWrapper&nbsp;bw)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;省略其他代码</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;对于大部分bean来说，PropertyValues是不会修改的，所以不会有这个逻辑</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(pvs&nbsp;!=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;applyPropertyValues(beanName,&nbsp;mbd,&nbsp;bw,&nbsp;pvs);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre> \n<h3 data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; display: block;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"font-size: 20px; color: rgb(0, 0, 0); line-height: 1.5em; letter-spacing: 0em; text-align: left; font-weight: bold; display: block;\">3、注册ProxyCreator</span><span class=\"suffix\" style=\"display: none;\"></span></h3> \n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left; margin-top: 10px; margin-bottom: 10px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; padding-top: 15px; background: #282c34; border-radius: 5px; display: -webkit-box; font-family: Consolas, Monaco, Menlo, monospace; font-size: 12px;\"><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;注册到spring</span><br><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">registerComponentIfNecessary</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(@Nullable&nbsp;BeanDefinition&nbsp;beanDefinition,&nbsp;ParserContext&nbsp;parserContext)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(beanDefinition&nbsp;!=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BeanComponentDefinition&nbsp;componentDefinition&nbsp;=<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;BeanComponentDefinition(beanDefinition,&nbsp;AopConfigUtils.AUTO_PROXY_CREATOR_BEAN_NAME);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parserContext.registerComponent(componentDefinition);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre> \n<h2 data-tool=\"mdnice编辑器\" style=\"border-bottom-color: rgb(239, 112, 96); margin-top: 30px; margin-bottom: 15px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; align-items: unset; background-attachment: scroll; background-clip: border-box; background-color: unset; background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; border-top-style: none; border-bottom-style: solid; border-left-style: none; border-right-style: none; border-top-width: 1px; border-bottom-width: 2px; border-left-width: 1px; border-right-width: 1px; border-top-color: rgb(0, 0, 0); border-left-color: rgb(0, 0, 0); border-right-color: rgb(0, 0, 0); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-left-radius: 0px; border-bottom-right-radius: 0px; box-shadow: none; display: flex; flex-direction: unset; float: unset; height: auto; justify-content: unset; line-height: 1.1em; overflow-x: unset; overflow-y: unset; position: relative; text-align: left; text-shadow: none; transform: none; width: auto; -webkit-box-reflect: unset;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"font-size: 22px; color: rgb(255, 255, 255); background-color: rgb(239, 112, 96); line-height: 1.5em; letter-spacing: 0em; align-items: unset; background-attachment: scroll; background-clip: border-box; background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-right-width: 1px; border-top-color: rgb(0, 0, 0); border-bottom-color: rgb(0, 0, 0); border-left-color: rgb(0, 0, 0); border-right-color: rgb(0, 0, 0); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-left-radius: 0px; border-bottom-right-radius: 0px; box-shadow: none; display: inline-block; font-weight: bold; flex-direction: unset; float: unset; height: auto; justify-content: unset; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 5px; overflow-x: unset; overflow-y: unset; padding-top: 3px; padding-bottom: 1px; padding-left: 10px; padding-right: 10px; position: relative; text-align: left; text-indent: 0em; text-shadow: none; transform: none; width: auto; -webkit-box-reflect: unset;\">四、ProxyCreator</span><span class=\"suffix\" style=\"display: none;\"></span><span style=\"border-bottom-color: rgb(239, 235, 233); align-items: unset; background-attachment: scroll; background-clip: border-box; background-color: unset; background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; border-top-style: none; border-bottom-style: solid; border-left-style: none; border-right-style: solid; border-top-width: 1px; border-bottom-width: 36px; border-left-width: 1px; border-right-width: 20px; border-top-color: rgb(0, 0, 0); border-left-color: rgb(0, 0, 0); border-right-color: transparent; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-left-radius: 0px; border-bottom-right-radius: 0px; box-shadow: none; color: rgb(0, 0, 0); display: inline-block; font-size: 16px; font-weight: bold; flex-direction: unset; float: unset; height: auto; justify-content: unset; letter-spacing: 0px; line-height: 1.1em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; overflow-x: unset; overflow-y: unset; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; position: relative; text-align: left; text-indent: 0em; text-shadow: none; transform: none; width: auto; -webkit-box-reflect: unset;\"> </span></h2> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">前面我们知道，真正干活的是 <strong style=\"color: rgb(0, 0, 0); font-weight: bold; background-attachment: scroll; background-clip: border-box; background-color: rgba(0, 0, 0, 0); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgba(0, 0, 0, 0.4); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\">AnnotationAwareAspectJAutoProxyCreator</strong>，我们看下他的类结构</p> \n<figure data-tool=\"mdnice编辑器\" style=\"margin-top: 10px; margin-bottom: 10px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; display: flex; flex-direction: column; justify-content: center; align-items: center;\"> \n <img src=\"https://files.mdnice.com/pic/9e588da7-846f-4735-950c-22bf481ea358.png\" alt=\"AnnotationAwareAspectJAutoProxyCreator类图\" style=\"display: block; margin-top: 0px; margin-right: auto; margin-bottom: 0px; margin-left: auto; max-width: 100%; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgba(0, 0, 0, 0.4); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px; object-fit: fill; box-shadow: rgba(0, 0, 0, 0) 0px 0px 0px 0px;\"> \n <figcaption style=\"color: rgb(136, 136, 136); font-size: 14px; line-height: 1.5em; letter-spacing: 0em; text-align: center; font-weight: normal; margin-top: 5px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px;\">\n   AnnotationAwareAspectJAutoProxyCreator类图 \n </figcaption> \n</figure> \n<h3 data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; display: block;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"font-size: 20px; color: rgb(0, 0, 0); line-height: 1.5em; letter-spacing: 0em; text-align: left; font-weight: bold; display: block;\">1、InstantiationAwareBeanPostProcessor</span><span class=\"suffix\" style=\"display: none;\"></span></h3> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">我们看下 <strong style=\"color: rgb(0, 0, 0); font-weight: bold; background-attachment: scroll; background-clip: border-box; background-color: rgba(0, 0, 0, 0); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgba(0, 0, 0, 0.4); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\">InstantiationAwareBeanPostProcessor</strong> 接口的三个方法：</p> \n<ul data-tool=\"mdnice编辑器\" style=\"list-style-type: disc; margin-top: 8px; margin-bottom: 8px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 25px; padding-right: 0px; color: rgb(0, 0, 0);\"> \n <li> \n  <section style=\"margin-top: 5px; margin-bottom: 5px; color: rgb(1, 1, 1); font-size: 16px; line-height: 1.8em; letter-spacing: 0em; text-align: left; font-weight: normal;\"> <strong style=\"color: rgb(0, 0, 0); font-weight: bold; background-attachment: scroll; background-clip: border-box; background-color: rgba(0, 0, 0, 0); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgba(0, 0, 0, 0.4); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\">postProcessBeforeInstantiation</strong>：在对象实例化前直接返回一个对象（如代理对象）来代替通过内置的实例化流程创建对象。 \n  </section></li> \n <li> \n  <section style=\"margin-top: 5px; margin-bottom: 5px; color: rgb(1, 1, 1); font-size: 16px; line-height: 1.8em; letter-spacing: 0em; text-align: left; font-weight: normal;\"> <strong style=\"color: rgb(0, 0, 0); font-weight: bold; background-attachment: scroll; background-clip: border-box; background-color: rgba(0, 0, 0, 0); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgba(0, 0, 0, 0.4); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\">postProcessAfterInstantiation</strong>：在对象实例化完毕，执行populateBean之前。如果返回false，则spring不再对对应的bean实例进行自动依赖注入。 \n  </section></li> \n <li> \n  <section style=\"margin-top: 5px; margin-bottom: 5px; color: rgb(1, 1, 1); font-size: 16px; line-height: 1.8em; letter-spacing: 0em; text-align: left; font-weight: normal;\"> <strong style=\"color: rgb(0, 0, 0); font-weight: bold; background-attachment: scroll; background-clip: border-box; background-color: rgba(0, 0, 0, 0); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgba(0, 0, 0, 0.4); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\">postProcessProperties</strong>：在spring处理完默认的成员属性，应用到指定的bean之前进行回调，可以用来检查和修改属性，最终返回的PropertyValues会应用到bean中。@Autowired、@Resource等就是根据这个回调来实现最终注入依赖的属性的。 \n  </section></li> \n</ul> \n<h3 data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; display: block;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"font-size: 20px; color: rgb(0, 0, 0); line-height: 1.5em; letter-spacing: 0em; text-align: left; font-weight: bold; display: block;\">2、SmartInstantiationAwareBeanPostProcessor</span><span class=\"suffix\" style=\"display: none;\"></span></h3> \n<ul data-tool=\"mdnice编辑器\" style=\"list-style-type: disc; margin-top: 8px; margin-bottom: 8px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 25px; padding-right: 0px; color: rgb(0, 0, 0);\"> \n <li> \n  <section style=\"margin-top: 5px; margin-bottom: 5px; color: rgb(1, 1, 1); font-size: 16px; line-height: 1.8em; letter-spacing: 0em; text-align: left; font-weight: normal;\"> <strong style=\"color: rgb(0, 0, 0); font-weight: bold; background-attachment: scroll; background-clip: border-box; background-color: rgba(0, 0, 0, 0); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgba(0, 0, 0, 0.4); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\">predictBeanType</strong>：预测此类最终返回的bean类型。 \n  </section></li> \n <li> \n  <section style=\"margin-top: 5px; margin-bottom: 5px; color: rgb(1, 1, 1); font-size: 16px; line-height: 1.8em; letter-spacing: 0em; text-align: left; font-weight: normal;\"> <strong style=\"color: rgb(0, 0, 0); font-weight: bold; background-attachment: scroll; background-clip: border-box; background-color: rgba(0, 0, 0, 0); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgba(0, 0, 0, 0.4); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\">determineCandidateConstructors</strong>：确定bean进行实例化的构造方法。 \n  </section></li> \n <li> \n  <section style=\"margin-top: 5px; margin-bottom: 5px; color: rgb(1, 1, 1); font-size: 16px; line-height: 1.8em; letter-spacing: 0em; text-align: left; font-weight: normal;\"> <strong style=\"color: rgb(0, 0, 0); font-weight: bold; background-attachment: scroll; background-clip: border-box; background-color: rgba(0, 0, 0, 0); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgba(0, 0, 0, 0.4); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\">getEarlyBeanReference</strong>：获取对象early引用，用于解决循环依赖。 \n  </section></li> \n</ul> \n<h3 data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; display: block;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"font-size: 20px; color: rgb(0, 0, 0); line-height: 1.5em; letter-spacing: 0em; text-align: left; font-weight: bold; display: block;\">3、ProxyCreator具体实现</span><span class=\"suffix\" style=\"display: none;\"></span></h3> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">被代理对象只需要提供一个Class对象即可，因此我们可以很轻易的发现代理过程是在 <strong style=\"color: rgb(0, 0, 0); font-weight: bold; background-attachment: scroll; background-clip: border-box; background-color: rgba(0, 0, 0, 0); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgba(0, 0, 0, 0.4); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\">InstantiationAwareBeanPostProcessor</strong>#<strong style=\"color: rgb(0, 0, 0); font-weight: bold; background-attachment: scroll; background-clip: border-box; background-color: rgba(0, 0, 0, 0); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgba(0, 0, 0, 0.4); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\">postProcessBeforeInstantiation</strong>、<strong style=\"color: rgb(0, 0, 0); font-weight: bold; background-attachment: scroll; background-clip: border-box; background-color: rgba(0, 0, 0, 0); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgba(0, 0, 0, 0.4); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\">postProcessAfterInitialization</strong>。</p> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">为啥会有涉及到两个环节呢？从源码注释中也能看出，第一步主要是处理自定义代理策略（第一部分已有讨论），第二步才是真正Spring AOP干活的地方。</p> \n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left; margin-top: 10px; margin-bottom: 10px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; padding-top: 15px; background: #282c34; border-radius: 5px; display: -webkit-box; font-family: Consolas, Monaco, Menlo, monospace; font-size: 12px;\"><span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Override</span><br><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;Object&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">postProcessBeforeInstantiation</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Class&lt;?&gt;&nbsp;beanClass,&nbsp;String&nbsp;beanName)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;Object&nbsp;cacheKey&nbsp;=&nbsp;getCacheKey(beanClass,&nbsp;beanName);<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(!StringUtils.hasLength(beanName)&nbsp;||&nbsp;!<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.targetSourcedBeans.contains(beanName))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advisedBeans.containsKey(cacheKey))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(isInfrastructureClass(beanClass)&nbsp;||&nbsp;shouldSkip(beanClass,&nbsp;beanName))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advisedBeans.put(cacheKey,&nbsp;Boolean.FALSE);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;承接上一章节</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;如果我们自定义了代理数据源，那么将在这里进行初始化</span><br>&nbsp;&nbsp;&nbsp;&nbsp;TargetSource&nbsp;targetSource&nbsp;=&nbsp;getCustomTargetSource(beanClass,&nbsp;beanName);<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(targetSource&nbsp;!=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(StringUtils.hasLength(beanName))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.targetSourcedBeans.add(beanName);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Object[]&nbsp;specificInterceptors&nbsp;=&nbsp;getAdvicesAndAdvisorsForBean(beanClass,&nbsp;beanName,&nbsp;targetSource);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Object&nbsp;proxy&nbsp;=&nbsp;createProxy(beanClass,&nbsp;beanName,&nbsp;specificInterceptors,&nbsp;targetSource);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.proxyTypes.put(cacheKey,&nbsp;proxy.getClass());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;proxy;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>;<br>}<br><br><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;如果该&nbsp;Bean&nbsp;被子类标识为代理&nbsp;Bean，则使用配置的拦截器创建代理</span><br><span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Override</span><br><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;Object&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">postProcessAfterInitialization</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(@Nullable&nbsp;Object&nbsp;bean,&nbsp;String&nbsp;beanName)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(bean&nbsp;!=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Object&nbsp;cacheKey&nbsp;=&nbsp;getCacheKey(bean.getClass(),&nbsp;beanName);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.earlyProxyReferences.remove(cacheKey)&nbsp;!=&nbsp;bean)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;我们重点看下这一方法，看下spring是如何判断类是否需要代理&nbsp;&amp;&nbsp;如何进行代理的</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;wrapIfNecessary(bean,&nbsp;beanName,&nbsp;cacheKey);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;bean;<br>}<br></code></pre> \n<h2 data-tool=\"mdnice编辑器\" style=\"border-bottom-color: rgb(239, 112, 96); margin-top: 30px; margin-bottom: 15px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; align-items: unset; background-attachment: scroll; background-clip: border-box; background-color: unset; background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; border-top-style: none; border-bottom-style: solid; border-left-style: none; border-right-style: none; border-top-width: 1px; border-bottom-width: 2px; border-left-width: 1px; border-right-width: 1px; border-top-color: rgb(0, 0, 0); border-left-color: rgb(0, 0, 0); border-right-color: rgb(0, 0, 0); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-left-radius: 0px; border-bottom-right-radius: 0px; box-shadow: none; display: flex; flex-direction: unset; float: unset; height: auto; justify-content: unset; line-height: 1.1em; overflow-x: unset; overflow-y: unset; position: relative; text-align: left; text-shadow: none; transform: none; width: auto; -webkit-box-reflect: unset;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"font-size: 22px; color: rgb(255, 255, 255); background-color: rgb(239, 112, 96); line-height: 1.5em; letter-spacing: 0em; align-items: unset; background-attachment: scroll; background-clip: border-box; background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-right-width: 1px; border-top-color: rgb(0, 0, 0); border-bottom-color: rgb(0, 0, 0); border-left-color: rgb(0, 0, 0); border-right-color: rgb(0, 0, 0); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-left-radius: 0px; border-bottom-right-radius: 0px; box-shadow: none; display: inline-block; font-weight: bold; flex-direction: unset; float: unset; height: auto; justify-content: unset; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 5px; overflow-x: unset; overflow-y: unset; padding-top: 3px; padding-bottom: 1px; padding-left: 10px; padding-right: 10px; position: relative; text-align: left; text-indent: 0em; text-shadow: none; transform: none; width: auto; -webkit-box-reflect: unset;\">五、wrapIfNecessary</span><span class=\"suffix\" style=\"display: none;\"></span><span style=\"border-bottom-color: rgb(239, 235, 233); align-items: unset; background-attachment: scroll; background-clip: border-box; background-color: unset; background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; border-top-style: none; border-bottom-style: solid; border-left-style: none; border-right-style: solid; border-top-width: 1px; border-bottom-width: 36px; border-left-width: 1px; border-right-width: 20px; border-top-color: rgb(0, 0, 0); border-left-color: rgb(0, 0, 0); border-right-color: transparent; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-left-radius: 0px; border-bottom-right-radius: 0px; box-shadow: none; color: rgb(0, 0, 0); display: inline-block; font-size: 16px; font-weight: bold; flex-direction: unset; float: unset; height: auto; justify-content: unset; letter-spacing: 0px; line-height: 1.1em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; overflow-x: unset; overflow-y: unset; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; position: relative; text-align: left; text-indent: 0em; text-shadow: none; transform: none; width: auto; -webkit-box-reflect: unset;\"> </span></h2> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">把关注点放在If Necessary，而不是How Proxy。</p> \n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left; margin-top: 10px; margin-bottom: 10px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; padding-top: 15px; background: #282c34; border-radius: 5px; display: -webkit-box; font-family: Consolas, Monaco, Menlo, monospace; font-size: 12px;\"><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;来源于类&nbsp;AbstractAutoProxyCreator</span><br><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">protected</span>&nbsp;Object&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">wrapIfNecessary</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Object&nbsp;bean,&nbsp;String&nbsp;beanName,&nbsp;Object&nbsp;cacheKey)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;如果已经处理过</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(beanName&nbsp;!=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>&nbsp;&amp;&amp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.targetSourcedBeans.containsKey(beanName))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;bean;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;无需增强</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(Boolean.FALSE.equals(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advisedBeans.get(cacheKey)))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;bean;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;给定的bean来是否代表一个基础设施类，基础设施类不应代理，或者配置了指定bean不需要自动代理</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(isInfrastructureClass(bean.getClass())&nbsp;||&nbsp;shouldSkip(bean.getClass(),&nbsp;beanName))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;标为不需要处理</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advisedBeans.put(cacheKey,&nbsp;Boolean.FALSE);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;bean;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;如果存在增强方法则创建代理，这个逻辑比较重要</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;Create&nbsp;proxy&nbsp;if&nbsp;we&nbsp;have&nbsp;advice.</span><br>&nbsp;&nbsp;&nbsp;&nbsp;Object[]&nbsp;specificInterceptors&nbsp;=&nbsp;getAdvicesAndAdvisorsForBean(bean.getClass(),&nbsp;beanName,&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;如果获取到了增强则需要针对增强创建代理</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(specificInterceptors&nbsp;!=&nbsp;DO_NOT_PROXY)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advisedBeans.put(cacheKey,&nbsp;Boolean.TRUE);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;创建代理</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Object&nbsp;proxy&nbsp;=&nbsp;createProxy(bean.getClass(),&nbsp;beanName,&nbsp;specificInterceptors,&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;SingletonTargetSource(bean));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.proxyTypes.put(cacheKey,&nbsp;proxy.getClass());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;proxy;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advisedBeans.put(cacheKey,&nbsp;Boolean.FALSE);<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;bean;<br>}<br></code></pre> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">方法中我们已经看到了代理创建的雏形。当然，真正开始之前还需要经过一些判断，比如是否已经处理过或者是否是需要跳过的bean，而真正创建代理的代码是从getAdvicesAndAdvisorsForBean开始的。</p> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">创建代理主要包含了两个步骤：</p> \n<ol data-tool=\"mdnice编辑器\" style=\"list-style-type: decimal; margin-top: 8px; margin-bottom: 8px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 25px; padding-right: 0px; color: rgb(0, 0, 0);\"> \n <li> \n  <section style=\"margin-top: 5px; margin-bottom: 5px; color: rgb(1, 1, 1); font-size: 16px; line-height: 1.8em; letter-spacing: 0em; text-align: left; font-weight: normal;\"> <strong style=\"color: rgb(0, 0, 0); font-weight: bold; background-attachment: scroll; background-clip: border-box; background-color: rgba(0, 0, 0, 0); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgba(0, 0, 0, 0.4); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\">获取增强方法或者增强器</strong>：getAdvicesAndAdvisorsForBean(bean.getClass(), beanName, null)。 \n  </section></li> \n <li> \n  <section style=\"margin-top: 5px; margin-bottom: 5px; color: rgb(1, 1, 1); font-size: 16px; line-height: 1.8em; letter-spacing: 0em; text-align: left; font-weight: normal;\"> <strong style=\"color: rgb(0, 0, 0); font-weight: bold; background-attachment: scroll; background-clip: border-box; background-color: rgba(0, 0, 0, 0); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgba(0, 0, 0, 0.4); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\">根据获取的增强进行代理</strong>：createProxy(bean.getClass(), beanName, specificInterceptors, new SingletonTargetSource(bean))。 \n  </section></li> \n</ol> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">本方法的每一步其实都经历了大量复杂的逻辑，首先来看看获取增强器方法的实现逻辑。</p> \n<h3 data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; display: block;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"font-size: 20px; color: rgb(0, 0, 0); line-height: 1.5em; letter-spacing: 0em; text-align: left; font-weight: bold; display: block;\">1、哪些需要加强？</span><span class=\"suffix\" style=\"display: none;\"></span></h3> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">注意这一步是下一步的前置条件，<strong style=\"color: rgb(0, 0, 0); font-weight: bold; background-attachment: scroll; background-clip: border-box; background-color: rgba(0, 0, 0, 0); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgba(0, 0, 0, 0.4); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\">也是判断一个对象是否需要代理的关键</strong>。</p> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">这里先附上结论，便于读者有个大概的印象：<strong style=\"color: rgb(0, 0, 0); font-weight: bold; background-attachment: scroll; background-clip: border-box; background-color: rgba(0, 0, 0, 0); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgba(0, 0, 0, 0.4); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\">判断一个对象是否需要代理，在于是否匹配AspectJ的Pointcut匹配规则（方法级别），或自定义Advisor增强器的Pointcu匹配规则</strong>。</p> \n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left; margin-top: 10px; margin-bottom: 10px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; padding-top: 15px; background: #282c34; border-radius: 5px; display: -webkit-box; font-family: Consolas, Monaco, Menlo, monospace; font-size: 12px;\"><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;来源于类&nbsp;AbstractAdvisorAutoProxyCreator</span><br><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">protected</span>&nbsp;Object[]&nbsp;getAdvicesAndAdvisorsForBean(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Class&lt;?&gt;&nbsp;beanClass,&nbsp;String&nbsp;beanName,&nbsp;<span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Nullable</span>&nbsp;TargetSource&nbsp;targetSource)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;List&lt;Advisor&gt;&nbsp;advisors&nbsp;=&nbsp;findEligibleAdvisors(beanClass,&nbsp;beanName);<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(advisors.isEmpty())&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;DO_NOT_PROXY;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;advisors.toArray();<br>}<br><br><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">protected</span>&nbsp;List&lt;Advisor&gt;&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">findEligibleAdvisors</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Class&nbsp;beanClass,&nbsp;String&nbsp;beanName)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;1.找出候选的增强器</span><br>&nbsp;&nbsp;&nbsp;&nbsp;List&lt;Advisor&gt;&nbsp;candidateAdvisors&nbsp;=&nbsp;findCandidateAdvisors();<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;2.再确定可以施加的增强器</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;默认Advisor类型为&nbsp;InstantiationModelAwarePointcutAdvisor</span><br>&nbsp;&nbsp;&nbsp;&nbsp;List&lt;Advisor&gt;&nbsp;eligibleAdvisors&nbsp;=&nbsp;findAdvisorsThatCanApply(candidateAdvisors,&nbsp;beanClass,&nbsp;beanName);<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;加入&nbsp;org.springframework.aop.interceptor.ExposeInvocationInterceptor.ADVISOR</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;因此实际的Advisor为n&nbsp;+&nbsp;1，且这一个总是数组/List的第一位</span><br>&nbsp;&nbsp;&nbsp;&nbsp;extendAdvisors(eligibleAdvisors);<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(!eligibleAdvisors.isEmpty())&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;保证上面的在第一位</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eligibleAdvisors&nbsp;=&nbsp;sortAdvisors(eligibleAdvisors);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;eligibleAdvisors;<br>}<br><br><span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Override</span><br><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">protected</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">extendAdvisors</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(List&lt;Advisor&gt;&nbsp;candidateAdvisors)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;AspectJProxyUtils.makeAdvisorChainAspectJCapableIfNecessary(candidateAdvisors);<br>}<br></code></pre> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">对于指定bean的增强方法的获取一定是包含两个步骤的，获取所有的增强以及寻找所有增强中适用与bean的增强并应用，那么findCandidateAdvisors与findAdvisorsThatCanApply便是做了这两件事情。当然，如果无法找到对应的增强器便返回DO_NOT_PROXY，其中DO_NOT_PROXY为null。</p> \n<h4 data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; display: block;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"font-size: 18px; color: rgb(0, 0, 0); line-height: 1.5em; letter-spacing: 0em; text-align: left; font-weight: bold; display: block;\">1、搜寻自定义增强</span><span class=\"suffix\" style=\"display: none;\"></span></h4> \n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left; margin-top: 10px; margin-bottom: 10px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; padding-top: 15px; background: #282c34; border-radius: 5px; display: -webkit-box; font-family: Consolas, Monaco, Menlo, monospace; font-size: 12px;\"><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;来自于类&nbsp;AnnotationAwareAspectJAutoProxyCreator</span><br><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">protected</span>&nbsp;List&lt;Advisor&gt;&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">findCandidateAdvisors</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;1.这一步的作用主要寻找用户显式定义的&nbsp;Advisor</span><br>&nbsp;&nbsp;&nbsp;&nbsp;List&lt;Advisor&gt;&nbsp;advisors&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">super</span>.findCandidateAdvisors();<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;2.搜寻被@AspectJ标记的类</span><br>&nbsp;&nbsp;&nbsp;&nbsp;advisors.addAll(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.aspectJAdvisorsBuilder.buildAspectJAdvisors());<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;advisors;<br>}<br><br><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;来自于类&nbsp;AbstractAdvisorAutoProxyCreator</span><br><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">protected</span>&nbsp;List&lt;Advisor&gt;&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">findCandidateAdvisors</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;Assert.state(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advisorRetrievalHelper&nbsp;!=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>,&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"No&nbsp;BeanFactoryAdvisorRetrievalHelper&nbsp;available\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;这里代码较多，简而言之就是搜寻&nbsp;Advisor&nbsp;的子类bean</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advisorRetrievalHelper.findAdvisorBeans();<br>}<br></code></pre> \n<h4 data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; display: block;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"font-size: 18px; color: rgb(0, 0, 0); line-height: 1.5em; letter-spacing: 0em; text-align: left; font-weight: bold; display: block;\">2、搜寻@AspectJ增强</span><span class=\"suffix\" style=\"display: none;\"></span></h4> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">顾名思义，上一步是创建自定义的Advisor，那么这一步是创建符合AspectJ语法规则的Advisor。</p> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">这里提前梳理一下流程，大致如下：</p> \n<ol data-tool=\"mdnice编辑器\" style=\"list-style-type: decimal; margin-top: 8px; margin-bottom: 8px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 25px; padding-right: 0px; color: rgb(0, 0, 0);\"> \n <li> \n  <section style=\"margin-top: 5px; margin-bottom: 5px; color: rgb(1, 1, 1); font-size: 16px; line-height: 1.8em; letter-spacing: 0em; text-align: left; font-weight: normal;\">\n    遍历所有bean，寻找被AspectJ注解标记的类。 \n  </section></li> \n <li> \n  <section style=\"margin-top: 5px; margin-bottom: 5px; color: rgb(1, 1, 1); font-size: 16px; line-height: 1.8em; letter-spacing: 0em; text-align: left; font-weight: normal;\">\n    再分析该类中的具体advisor，如对于@After、@Before来说，两个advisor是不一样的。 \n  </section></li> \n <li> \n  <section style=\"margin-top: 5px; margin-bottom: 5px; color: rgb(1, 1, 1); font-size: 16px; line-height: 1.8em; letter-spacing: 0em; text-align: left; font-weight: normal;\">\n    根据Pointcut规则，创建对应的advisor。 \n  </section></li> \n</ol> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">如下是代码细节</p> \n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left; margin-top: 10px; margin-bottom: 10px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; padding-top: 15px; background: #282c34; border-radius: 5px; display: -webkit-box; font-family: Consolas, Monaco, Menlo, monospace; font-size: 12px;\"><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;有了上一章节的补充，相信这里不难理解</span><br><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;本质是将&nbsp;@AspectJ语法&nbsp;转换为代码&nbsp;-&gt;&nbsp;Advisor</span><br><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;List&lt;Advisor&gt;&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">buildAspectJAdvisors</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;List&lt;String&gt;&nbsp;aspectNames&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">synchronized</span>&nbsp;(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;被@AspectJ标注的bean的List</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aspectNames&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.aspectBeanNames;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;如果没指定@AspectJ、自定义Advisor，那么根据includePatterns去匹配Advisor，默认为null</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;此逻辑必走，保证了&nbsp;aspectNames&nbsp;有值</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(aspectNames&nbsp;==&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&lt;Advisor&gt;&nbsp;advisors&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;LinkedList&lt;Advisor&gt;();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aspectNames&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;LinkedList&lt;String&gt;();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;获取所有beanName</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String[]&nbsp;beanNames&nbsp;=<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BeanFactoryUtils.beanNamesForTypeIncludingAncestors(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.beanFactory,&nbsp;Object<span class=\"hljs-class\" style=\"line-height: 26px;\">.<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">class</span>,&nbsp;<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">true</span>,&nbsp;<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">false</span>)</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;循环所有的beanName，找出对应的增强方法</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">for</span>&nbsp;(String&nbsp;beanName&nbsp;:&nbsp;beanNames)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;不合法的bean则略过，由子类定义规则，默认返回true</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;匹配includePatterns规则</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(!isEligibleBean(beanName))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">continue</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;We&nbsp;must&nbsp;be&nbsp;careful&nbsp;not&nbsp;to&nbsp;instantiate&nbsp;beans&nbsp;eagerly&nbsp;as&nbsp;in&nbsp;this</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;case&nbsp;they&nbsp;would&nbsp;be&nbsp;cached&nbsp;by&nbsp;the&nbsp;Spring&nbsp;container&nbsp;but&nbsp;would&nbsp;not</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;have&nbsp;been&nbsp;weaved</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;获取对应的bean类型</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Class&nbsp;beanType&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.beanFactory.getType(beanName);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(beanType&nbsp;==&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">continue</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;======&nbsp;如果存在Aspect注解，核心判断逻辑&nbsp;======</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advisorFactory.isAspect(beanType))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aspectNames.add(beanName);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AspectMetadata&nbsp;amd&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;AspectMetadata(beanType,&nbsp;beanName);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(amd.getAjType().getPerClause().getKind()&nbsp;==&nbsp;PerClauseKind.SINGLETON)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MetadataAwareAspectInstanceFactory&nbsp;factory&nbsp;=<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;BeanFactoryAspectInstanceFactory(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.beanFactory,&nbsp;beanName);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;解析标记AspectJ注解中的增强方法</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&lt;Advisor&gt;&nbsp;classAdvisors&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advisorFactory.getAdvisors(factory);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.beanFactory.isSingleton(beanName))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advisorsCache.put(beanName,&nbsp;classAdvisors);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">else</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.aspectFactoryCache.put(beanName,&nbsp;factory);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;advisors.addAll(classAdvisors);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">else</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;Per&nbsp;target&nbsp;or&nbsp;per&nbsp;this.</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.beanFactory.isSingleton(beanName))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">throw</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;IllegalArgumentException(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"Bean&nbsp;with&nbsp;name&nbsp;'\"</span>&nbsp;+&nbsp;beanName&nbsp;+<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"'&nbsp;is&nbsp;a&nbsp;singleton,&nbsp;but&nbsp;aspect&nbsp;instantiation&nbsp;model&nbsp;is&nbsp;not&nbsp;singleton\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MetadataAwareAspectInstanceFactory&nbsp;factory&nbsp;=<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;PrototypeAspectInstanceFactory(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.beanFactory,&nbsp;beanName);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.aspectFactoryCache.put(beanName,&nbsp;factory);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;advisors.addAll(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advisorFactory.getAdvisors(factory));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;====&nbsp;这里存在赋值&nbsp;====</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.aspectBeanNames&nbsp;=&nbsp;aspectNames;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;advisors;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(aspectNames.isEmpty())&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;Collections.EMPTY_LIST;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;List&lt;Advisor&gt;&nbsp;advisors&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;LinkedList&lt;Advisor&gt;();<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">for</span>&nbsp;(String&nbsp;aspectName&nbsp;:&nbsp;aspectNames)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&lt;Advisor&gt;&nbsp;cachedAdvisors&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advisorsCache.get(aspectName);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(cachedAdvisors&nbsp;!=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;注意这一步，虽然@AspectJ只对应一个aspectNames，但里面有多个切点，如@After、@Before</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;所以这里的Advisor也是有多个的</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;advisors.addAll(cachedAdvisors);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">else</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MetadataAwareAspectInstanceFactory&nbsp;factory&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.aspectFactoryCache.get(aspectName);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;advisors.addAll(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advisorFactory.getAdvisors(factory));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;advisors;<br>}<br></code></pre> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">至此，我们已经完成了Advisor的提取。</p> \n<h4 data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; display: block;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"font-size: 18px; color: rgb(0, 0, 0); line-height: 1.5em; letter-spacing: 0em; text-align: left; font-weight: bold; display: block;\">3、确定与bean对应增强</span><span class=\"suffix\" style=\"display: none;\"></span></h4> \n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left; margin-top: 10px; margin-bottom: 10px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; padding-top: 15px; background: #282c34; border-radius: 5px; display: -webkit-box; font-family: Consolas, Monaco, Menlo, monospace; font-size: 12px;\"><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;找到所有Advisor后，就看能不能对这个bean使用了</span><br><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">protected</span>&nbsp;List&lt;Advisor&gt;&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">findAdvisorsThatCanApply</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&lt;Advisor&gt;&nbsp;candidateAdvisors,&nbsp;Class&lt;?&gt;&nbsp;beanClass,&nbsp;String&nbsp;beanName)</span>&nbsp;</span>{<br>&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;使用ThreadLocal保证beanName可见性</span><br>&nbsp;&nbsp;&nbsp;&nbsp;ProxyCreationContext.setCurrentProxiedBeanName(beanName);<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">try</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;AopUtils.findAdvisorsThatCanApply(candidateAdvisors,&nbsp;beanClass);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">finally</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ProxyCreationContext.setCurrentProxiedBeanName(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br><br><br><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">static</span>&nbsp;List&lt;Advisor&gt;&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">findAdvisorsThatCanApply</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(List&lt;Advisor&gt;&nbsp;candidateAdvisors,&nbsp;Class&lt;?&gt;&nbsp;clazz)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(candidateAdvisors.isEmpty())&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;candidateAdvisors;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;List&lt;Advisor&gt;&nbsp;eligibleAdvisors&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;ArrayList&lt;&gt;();<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">for</span>&nbsp;(Advisor&nbsp;candidate&nbsp;:&nbsp;candidateAdvisors)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;不走这个逻辑，因为不是&nbsp;IntroductionAdvisor</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(candidate&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">instanceof</span>&nbsp;IntroductionAdvisor&nbsp;&amp;&amp;&nbsp;canApply(candidate,&nbsp;clazz))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eligibleAdvisors.add(candidate);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">boolean</span>&nbsp;hasIntroductions&nbsp;=&nbsp;!eligibleAdvisors.isEmpty();<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">for</span>&nbsp;(Advisor&nbsp;candidate&nbsp;:&nbsp;candidateAdvisors)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(candidate&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">instanceof</span>&nbsp;IntroductionAdvisor)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;already&nbsp;processed</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">continue</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;关键的一行</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(canApply(candidate,&nbsp;clazz,&nbsp;hasIntroductions))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eligibleAdvisors.add(candidate);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;eligibleAdvisors;<br>}<br><br><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;这个逻辑追主要区别于下面逻辑的点在于对&nbsp;IntroductionAdvisor&nbsp;的处理，一般来说，不需要特别关心</span><br><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;1&nbsp;PointcutAdvisor是方法级别，需要用到Pointcut和Advisor。注意Pointcut可以使用任何类型的Pointcut，Advice也可以任何类型的Advice</span><br><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;2&nbsp;IntroductionAdvisor是类级别,&nbsp;只能使用IntroductionAdvice类型的Advice&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><br><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">boolean</span>&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">canApply</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Advisor&nbsp;advisor,&nbsp;Class&lt;?&gt;&nbsp;targetClass,&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">boolean</span>&nbsp;hasIntroductions)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(advisor&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">instanceof</span>&nbsp;IntroductionAdvisor)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;这个地方有点似曾相识？</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;((IntroductionAdvisor)&nbsp;advisor).getClassFilter().matches(targetClass);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">else</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(advisor&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">instanceof</span>&nbsp;PointcutAdvisor)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;PointcutAdvisor&nbsp;pca&nbsp;=&nbsp;(PointcutAdvisor)&nbsp;advisor;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;我们关注点在这里</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;canApply(pca.getPointcut(),&nbsp;targetClass,&nbsp;hasIntroductions);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">else</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;It&nbsp;doesn't&nbsp;have&nbsp;a&nbsp;pointcut&nbsp;so&nbsp;we&nbsp;assume&nbsp;it&nbsp;applies.</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">true</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br><br><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">boolean</span>&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">canApply</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Pointcut&nbsp;pc,&nbsp;Class&lt;?&gt;&nbsp;targetClass,&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">boolean</span>&nbsp;hasIntroductions)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;Assert.notNull(pc,&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"Pointcut&nbsp;must&nbsp;not&nbsp;be&nbsp;null\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;熟悉的代码</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(!pc.getClassFilter().matches(targetClass))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">false</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;MethodMatcher&nbsp;methodMatcher&nbsp;=&nbsp;pc.getMethodMatcher();<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(methodMatcher&nbsp;==&nbsp;MethodMatcher.TRUE)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;No&nbsp;need&nbsp;to&nbsp;iterate&nbsp;the&nbsp;methods&nbsp;if&nbsp;we're&nbsp;matching&nbsp;any&nbsp;method&nbsp;anyway...</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">true</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;还是对于&nbsp;IntroductionAdvisor&nbsp;的处理</span><br>&nbsp;&nbsp;&nbsp;&nbsp;IntroductionAwareMethodMatcher&nbsp;introductionAwareMethodMatcher&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(methodMatcher&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">instanceof</span>&nbsp;IntroductionAwareMethodMatcher)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;introductionAwareMethodMatcher&nbsp;=&nbsp;(IntroductionAwareMethodMatcher)&nbsp;methodMatcher;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;Set&lt;Class&lt;?&gt;&gt;&nbsp;classes&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;LinkedHashSet&lt;&gt;();<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(!Proxy.isProxyClass(targetClass))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;classes.add(ClassUtils.getUserClass(targetClass));<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;classes.addAll(ClassUtils.getAllInterfacesForClassAsSet(targetClass));<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">for</span>&nbsp;(Class&lt;?&gt;&nbsp;clazz&nbsp;:&nbsp;classes)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method[]&nbsp;methods&nbsp;=&nbsp;ReflectionUtils.getAllDeclaredMethods(clazz);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">for</span>&nbsp;(Method&nbsp;method&nbsp;:&nbsp;methods)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(introductionAwareMethodMatcher&nbsp;!=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>&nbsp;?<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;introductionAwareMethodMatcher.matches(method,&nbsp;targetClass,&nbsp;hasIntroductions)&nbsp;:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;我们关注这一行，熟悉的代码</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;使用@AspectJ，那么它的Pointcut类型就是&nbsp;AspectJExpressionPointcut</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;methodMatcher.matches(method,&nbsp;targetClass))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">true</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">false</span>;<br>}<br></code></pre> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">那么到此位置，我们就找到了找到了需要的Advisor，接下来就是应用了。</p> \n<h3 data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; display: block;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"font-size: 20px; color: rgb(0, 0, 0); line-height: 1.5em; letter-spacing: 0em; text-align: left; font-weight: bold; display: block;\">2、createProxy</span><span class=\"suffix\" style=\"display: none;\"></span></h3> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">在获取了所有对应bean的增强器后，便可以进行代理的创建了。</p> \n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left; margin-top: 10px; margin-bottom: 10px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; padding-top: 15px; background: #282c34; border-radius: 5px; display: -webkit-box; font-family: Consolas, Monaco, Menlo, monospace; font-size: 12px;\"><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;来源于类&nbsp;AbstractAutoProxyCreator</span><br><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">protected</span>&nbsp;Object&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">createProxy</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Class&lt;?&gt;&nbsp;beanClass,&nbsp;@Nullable&nbsp;String&nbsp;beanName,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@Nullable&nbsp;Object[]&nbsp;specificInterceptors,&nbsp;TargetSource&nbsp;targetSource)</span>&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.beanFactory&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">instanceof</span>&nbsp;ConfigurableListableBeanFactory)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AutoProxyUtils.exposeTargetClass((ConfigurableListableBeanFactory)&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.beanFactory,&nbsp;beanName,&nbsp;beanClass);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;ProxyFactory&nbsp;proxyFactory&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;ProxyFactory();<br>&nbsp;&nbsp;&nbsp;&nbsp;proxyFactory.copyFrom(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;如果不强制使用CGLIB代理</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;这里只是设置属性</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(!proxyFactory.isProxyTargetClass())&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;那么对于继承类使用CGLIB</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(shouldProxyTargetClass(beanClass,&nbsp;beanName))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxyFactory.setProxyTargetClass(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">true</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">else</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;对于接口使用JDK代理</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;evaluateProxyInterfaces(beanClass,&nbsp;proxyFactory);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;Advisor[]&nbsp;advisors&nbsp;=&nbsp;buildAdvisors(beanName,&nbsp;specificInterceptors);<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;加入增强器</span><br>&nbsp;&nbsp;&nbsp;&nbsp;proxyFactory.addAdvisors(advisors);<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;设置要代理的类</span><br>&nbsp;&nbsp;&nbsp;&nbsp;proxyFactory.setTargetSource(targetSource);<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;子类继承类AbstractAutoProxyCreator，以重写customizeProxyFactory方法逻辑，默认空实现</span><br>&nbsp;&nbsp;&nbsp;&nbsp;customizeProxyFactory(proxyFactory);<br>&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;用来控制代理工厂被配置之后，是否还允许修改通知</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;缺省值为false，即在代理被配置之后，不允许修改代理的配置</span><br>&nbsp;&nbsp;&nbsp;&nbsp;proxyFactory.setFrozen(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.freezeProxy);<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(advisorsPreFiltered())&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxyFactory.setPreFiltered(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">true</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;proxyFactory.getProxy(getProxyClassLoader());<br>}<br></code></pre> \n<h4 data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; display: block;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"font-size: 18px; color: rgb(0, 0, 0); line-height: 1.5em; letter-spacing: 0em; text-align: left; font-weight: bold; display: block;\">1、createAopProxy</span><span class=\"suffix\" style=\"display: none;\"></span></h4> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">由于Spring中涉及过多的拦截器、增强器、增强方法等方式来对多级进行增强，所以非常有必要统一封装成Advisor来进行代理的创建。</p> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">完成了增强的封装过程，那么解析最重要的一步就是代理的创建与获取了。</p> \n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left; margin-top: 10px; margin-bottom: 10px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; padding-top: 15px; background: #282c34; border-radius: 5px; display: -webkit-box; font-family: Consolas, Monaco, Menlo, monospace; font-size: 12px;\"><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;来源于类&nbsp;ProxyCreatorSupport</span><br><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;Object&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">getProxy</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(@Nullable&nbsp;ClassLoader&nbsp;classLoader)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;createAopProxy().getProxy(classLoader);<br>}<br><br><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">protected</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">final</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">synchronized</span>&nbsp;AopProxy&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">createAopProxy</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(!<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.active)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;主要是触发监听事件&nbsp;AdvisedSupportListener</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;activate();<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;getAopProxyFactory().createAopProxy(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>);<br>}<br><br><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;AopProxyFactory&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">getAopProxyFactory</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;其中&nbsp;this.aopProxyFactory&nbsp;=&nbsp;new&nbsp;DefaultAopProxyFactory();</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.aopProxyFactory;<br>}<br><br><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;终于抓住了这个幕后凶手了，有没有这样的感觉？</span><br><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">DefaultAopProxyFactory</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">implements</span>&nbsp;<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">AopProxyFactory</span>,&nbsp;<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">Serializable</span>&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;最终都是调用这个方法以创建代理</span><br>&nbsp;<span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Override</span><br>&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;AopProxy&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">createAopProxy</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(AdvisedSupport&nbsp;config)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">throws</span>&nbsp;AopConfigException&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(config.isOptimize()&nbsp;||&nbsp;config.isProxyTargetClass()&nbsp;||&nbsp;hasNoUserSuppliedProxyInterfaces(config))&nbsp;{<br>&nbsp;&nbsp;&nbsp;Class&lt;?&gt;&nbsp;targetClass&nbsp;=&nbsp;config.getTargetClass();<br>&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(targetClass&nbsp;==&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">throw</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;AopConfigException(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"TargetSource&nbsp;cannot&nbsp;determine&nbsp;target&nbsp;class:&nbsp;\"</span>&nbsp;+<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"Either&nbsp;an&nbsp;interface&nbsp;or&nbsp;a&nbsp;target&nbsp;is&nbsp;required&nbsp;for&nbsp;proxy&nbsp;creation.\"</span>);<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(targetClass.isInterface()&nbsp;||&nbsp;Proxy.isProxyClass(targetClass))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;JdkDynamicAopProxy(config);<br>&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;ObjenesisCglibAopProxy(config);<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">else</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;JdkDynamicAopProxy(config);<br>&nbsp;&nbsp;}<br>&nbsp;}<br>}<br></code></pre> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">下面是对上文创建代理的总结</p> \n<ul data-tool=\"mdnice编辑器\" style=\"list-style-type: disc; margin-top: 8px; margin-bottom: 8px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 25px; padding-right: 0px; color: rgb(0, 0, 0);\"> \n <li> \n  <section style=\"margin-top: 5px; margin-bottom: 5px; color: rgb(1, 1, 1); font-size: 16px; line-height: 1.8em; letter-spacing: 0em; text-align: left; font-weight: normal;\">\n    如果目标对象实现了接口，<strong style=\"color: rgb(0, 0, 0); font-weight: bold; background-attachment: scroll; background-clip: border-box; background-color: rgba(0, 0, 0, 0); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgba(0, 0, 0, 0.4); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\">默认</strong>情况下会采用JDK的动态代理实现代理。 \n  </section></li> \n <li> \n  <section style=\"margin-top: 5px; margin-bottom: 5px; color: rgb(1, 1, 1); font-size: 16px; line-height: 1.8em; letter-spacing: 0em; text-align: left; font-weight: normal;\">\n    如果目标对象实现了接口，可以通过设置proxy-target-class=true<strong style=\"color: rgb(0, 0, 0); font-weight: bold; background-attachment: scroll; background-clip: border-box; background-color: rgba(0, 0, 0, 0); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgba(0, 0, 0, 0.4); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px;\">强制</strong>使用CGLIB实现代理。 \n  </section></li> \n <li> \n  <section style=\"margin-top: 5px; margin-bottom: 5px; color: rgb(1, 1, 1); font-size: 16px; line-height: 1.8em; letter-spacing: 0em; text-align: left; font-weight: normal;\">\n    如果目标对象没有实现接口，必须采用CGLIB库。 \n  </section></li> \n</ul> \n<h4 data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; display: block;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"font-size: 18px; color: rgb(0, 0, 0); line-height: 1.5em; letter-spacing: 0em; text-align: left; font-weight: bold; display: block;\">2、getProxy（JDK）</span><span class=\"suffix\" style=\"display: none;\"></span></h4> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">有了代理对象后，现在需要获取代理对象了。</p> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">那么我们看看Spring中的JDK代理实现是不是也是这么做的，继续之前的跟踪，到达JdkDynamicAopProxy的getProxy。</p> \n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left; margin-top: 10px; margin-bottom: 10px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; padding-top: 15px; background: #282c34; border-radius: 5px; display: -webkit-box; font-family: Consolas, Monaco, Menlo, monospace; font-size: 12px;\"><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;这里以jdk代理为例</span><br><span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Override</span><br><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;Object&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">getProxy</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(@Nullable&nbsp;ClassLoader&nbsp;classLoader)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(logger.isTraceEnabled())&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logger.trace(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"Creating&nbsp;JDK&nbsp;dynamic&nbsp;proxy:&nbsp;\"</span>&nbsp;+&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advised.getTargetSource());<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;除了原class接口，还额外加入&nbsp;Advised、SpringProxy、DecoratingProxy接口</span><br>&nbsp;&nbsp;&nbsp;&nbsp;Class&lt;?&gt;[]&nbsp;proxiedInterfaces&nbsp;=&nbsp;AopProxyUtils.completeProxiedInterfaces(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advised,&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">true</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;寻找接口上定义的equals、hashcode方法，主要是处理default方法逻辑</span><br>&nbsp;&nbsp;&nbsp;&nbsp;findDefinedEqualsAndHashCodeMethods(proxiedInterfaces);<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;创建实例，当我们打印&nbsp;userService.getClass().getInterfaces();</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;会发现会多出额外的3个接口，正因为这个原因，所以Spring创建的JDK代理对象会比原JDK创建的代理多出不少方法</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;当我们确定这个是Spring创建的JDK代理对象时，那么就可以通过这个3个接口里面的方法获取/修改相应的信息</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;判断方法为&nbsp;AopUtils.isJdkDynamicProxy(obj)、AopUtils.isCglibProxy(obj)</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;Proxy.newProxyInstance(classLoader,&nbsp;proxiedInterfaces,&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>);<br>}<br><br><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;jdk</span><br><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">boolean</span>&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">isJdkDynamicProxy</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(@Nullable&nbsp;Object&nbsp;object)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;(object&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">instanceof</span>&nbsp;SpringProxy&nbsp;&amp;&amp;&nbsp;Proxy.isProxyClass(object.getClass()));<br>}<br><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">boolean</span>&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">isProxyClass</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Class&lt;?&gt;&nbsp;cl)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;Proxy<span class=\"hljs-class\" style=\"line-height: 26px;\">.<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">class</span>.<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">isAssignableFrom</span>(<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">cl</span>)&nbsp;&amp;&amp;&nbsp;<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">proxyClassCache</span>.<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">containsValue</span>(<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">cl</span>)</span>;<br>}<br><br><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;cglib</span><br><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">boolean</span>&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">isCglibProxy</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(@Nullable&nbsp;Object&nbsp;object)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;ClassUtils.CGLIB_CLASS_SEPARATOR&nbsp;=&nbsp;$$</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;(object&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">instanceof</span>&nbsp;SpringProxy&nbsp;&amp;&amp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;object.getClass().getName().contains(ClassUtils.CGLIB_CLASS_SEPARATOR));<br>}<br><br><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;通过注释我们知道，这个方法不仅会完成对原class接口的提取，还会加入Spring内置的父接口</span><br><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">static</span>&nbsp;Class&lt;?&gt;[]&nbsp;completeProxiedInterfaces(AdvisedSupport&nbsp;advised,&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">boolean</span>&nbsp;decoratingProxy)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;Class&lt;?&gt;[]&nbsp;specifiedInterfaces&nbsp;=&nbsp;advised.getProxiedInterfaces();<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(specifiedInterfaces.length&nbsp;==&nbsp;<span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">0</span>)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;No&nbsp;user-specified&nbsp;interfaces:&nbsp;check&nbsp;whether&nbsp;target&nbsp;class&nbsp;is&nbsp;an&nbsp;interface.</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Class&lt;?&gt;&nbsp;targetClass&nbsp;=&nbsp;advised.getTargetClass();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(targetClass&nbsp;!=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(targetClass.isInterface())&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;advised.setInterfaces(targetClass);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">else</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(Proxy.isProxyClass(targetClass))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;advised.setInterfaces(targetClass.getInterfaces());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;specifiedInterfaces&nbsp;=&nbsp;advised.getProxiedInterfaces();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">boolean</span>&nbsp;addSpringProxy&nbsp;=&nbsp;!advised.isInterfaceProxied(SpringProxy<span class=\"hljs-class\" style=\"line-height: 26px;\">.<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">class</span>)</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">boolean</span>&nbsp;addAdvised&nbsp;=&nbsp;!advised.isOpaque()&nbsp;&amp;&amp;&nbsp;!advised.isInterfaceProxied(Advised<span class=\"hljs-class\" style=\"line-height: 26px;\">.<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">class</span>)</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">boolean</span>&nbsp;addDecoratingProxy&nbsp;=&nbsp;(decoratingProxy&nbsp;&amp;&amp;&nbsp;!advised.isInterfaceProxied(DecoratingProxy<span class=\"hljs-class\" style=\"line-height: 26px;\">.<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">class</span>))</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">int</span>&nbsp;nonUserIfcCount&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">0</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(addSpringProxy)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nonUserIfcCount++;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(addAdvised)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nonUserIfcCount++;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(addDecoratingProxy)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nonUserIfcCount++;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;Class&lt;?&gt;[]&nbsp;proxiedInterfaces&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;Class&lt;?&gt;[specifiedInterfaces.length&nbsp;+&nbsp;nonUserIfcCount];<br>&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(specifiedInterfaces,&nbsp;<span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">0</span>,&nbsp;proxiedInterfaces,&nbsp;<span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">0</span>,&nbsp;specifiedInterfaces.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">int</span>&nbsp;index&nbsp;=&nbsp;specifiedInterfaces.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(addSpringProxy)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxiedInterfaces[index]&nbsp;=&nbsp;SpringProxy<span class=\"hljs-class\" style=\"line-height: 26px;\">.<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">class</span></span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index++;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(addAdvised)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxiedInterfaces[index]&nbsp;=&nbsp;Advised<span class=\"hljs-class\" style=\"line-height: 26px;\">.<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">class</span></span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;index++;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(addDecoratingProxy)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxiedInterfaces[index]&nbsp;=&nbsp;DecoratingProxy<span class=\"hljs-class\" style=\"line-height: 26px;\">.<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">class</span></span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;proxiedInterfaces;<br>}<br><br><br><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;寻找接口上定义的equals、hashcode方法</span><br><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">findDefinedEqualsAndHashCodeMethods</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Class&lt;?&gt;[]&nbsp;proxiedInterfaces)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">for</span>&nbsp;(Class&lt;?&gt;&nbsp;proxiedInterface&nbsp;:&nbsp;proxiedInterfaces)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method[]&nbsp;methods&nbsp;=&nbsp;proxiedInterface.getDeclaredMethods();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">for</span>&nbsp;(Method&nbsp;method&nbsp;:&nbsp;methods)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(AopUtils.isEqualsMethod(method))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.equalsDefined&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">true</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(AopUtils.isHashCodeMethod(method))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.hashCodeDefined&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">true</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.equalsDefined&nbsp;&amp;&amp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.hashCodeDefined)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">通过之前的示例我们知道，JDKProxy的使用关键是创建自定义的InvocationHandler，而InvocationHandler中包含了需要覆盖的方法getProxy，而当前的方法正是完成这个操作的。</p> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">再次去确认一下，JdkDynamicAopProxy也确实实现了InvocationHandler接口，那么我们就可以推断还有一个invoke方法，并且JdkDynamicAopProxy会把AOP的核心逻辑写在其中。</p> \n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left; margin-top: 10px; margin-bottom: 10px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; padding-top: 15px; background: #282c34; border-radius: 5px; display: -webkit-box; font-family: Consolas, Monaco, Menlo, monospace; font-size: 12px;\"><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;来自于类&nbsp;JdkDynamicAopProxy</span><br><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;当调用代理对象方法时，才会进入这个逻辑</span><br><span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Override</span><br><span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Nullable</span><br><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;Object&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">invoke</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Object&nbsp;proxy,&nbsp;Method&nbsp;method,&nbsp;Object[]&nbsp;args)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">throws</span>&nbsp;Throwable&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;Object&nbsp;oldProxy&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">boolean</span>&nbsp;setProxyContext&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">false</span>;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;TargetSource&nbsp;targetSource&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advised.targetSource;<br>&nbsp;&nbsp;&nbsp;&nbsp;Object&nbsp;target&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">try</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(!<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.equalsDefined&nbsp;&amp;&amp;&nbsp;AopUtils.isEqualsMethod(method))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;The&nbsp;target&nbsp;does&nbsp;not&nbsp;implement&nbsp;the&nbsp;equals(Object)&nbsp;method&nbsp;itself.</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;equals(args[<span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">0</span>]);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">else</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(!<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.hashCodeDefined&nbsp;&amp;&amp;&nbsp;AopUtils.isHashCodeMethod(method))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;The&nbsp;target&nbsp;does&nbsp;not&nbsp;implement&nbsp;the&nbsp;hashCode()&nbsp;method&nbsp;itself.</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;hashCode();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">else</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(method.getDeclaringClass()&nbsp;==&nbsp;DecoratingProxy<span class=\"hljs-class\" style=\"line-height: 26px;\">.<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">class</span>)&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;There&nbsp;is&nbsp;only&nbsp;getDecoratedClass()&nbsp;declared&nbsp;-&gt;&nbsp;dispatch&nbsp;to&nbsp;proxy&nbsp;config.</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;注意这个逻辑，当调用DecoratingProxy接口getDecoratedClass()进这个逻辑</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;一般不调，一般返回被代理类型</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;AopProxyUtils.ultimateTargetClass(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advised);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">else</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(!<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advised.opaque&nbsp;&amp;&amp;&nbsp;method.getDeclaringClass().isInterface()&nbsp;&amp;&amp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;method.getDeclaringClass().isAssignableFrom(Advised<span class=\"hljs-class\" style=\"line-height: 26px;\">.<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">class</span>))&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;Service&nbsp;invocations&nbsp;on&nbsp;ProxyConfig&nbsp;with&nbsp;the&nbsp;proxy&nbsp;config...</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;大致同上，对于Advised接口的支持</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;AopUtils.invokeJoinpointUsingReflection(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advised,&nbsp;method,&nbsp;args);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;真正的创建代理逻辑在下面</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Object&nbsp;retVal;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advised.exposeProxy)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;Make&nbsp;invocation&nbsp;available&nbsp;if&nbsp;necessary.</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldProxy&nbsp;=&nbsp;AopContext.setCurrentProxy(proxy);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setProxyContext&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">true</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;Get&nbsp;as&nbsp;late&nbsp;as&nbsp;possible&nbsp;to&nbsp;minimize&nbsp;the&nbsp;time&nbsp;we&nbsp;\"own\"&nbsp;the&nbsp;target,</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;in&nbsp;case&nbsp;it&nbsp;comes&nbsp;from&nbsp;a&nbsp;pool.</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;target&nbsp;=&nbsp;targetSource.getTarget();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Class&lt;?&gt;&nbsp;targetClass&nbsp;=&nbsp;(target&nbsp;!=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>&nbsp;?&nbsp;target.getClass()&nbsp;:&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;Get&nbsp;the&nbsp;interception&nbsp;chain&nbsp;for&nbsp;this&nbsp;method.</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;====&nbsp;获取Advisor增强器&nbsp;====</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&lt;Object&gt;&nbsp;chain&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advised.getInterceptorsAndDynamicInterceptionAdvice(method,&nbsp;targetClass);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;Check&nbsp;whether&nbsp;we&nbsp;have&nbsp;any&nbsp;advice.&nbsp;If&nbsp;we&nbsp;don't,&nbsp;we&nbsp;can&nbsp;fallback&nbsp;on&nbsp;direct</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;reflective&nbsp;invocation&nbsp;of&nbsp;the&nbsp;target,&nbsp;and&nbsp;avoid&nbsp;creating&nbsp;a&nbsp;MethodInvocation.</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(chain.isEmpty())&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Object[]&nbsp;argsToUse&nbsp;=&nbsp;AopProxyUtils.adaptArgumentsIfNecessary(method,&nbsp;args);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retVal&nbsp;=&nbsp;AopUtils.invokeJoinpointUsingReflection(target,&nbsp;method,&nbsp;argsToUse);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">else</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;We&nbsp;need&nbsp;to&nbsp;create&nbsp;a&nbsp;method&nbsp;invocation...</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MethodInvocation&nbsp;invocation&nbsp;=<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;ReflectiveMethodInvocation(proxy,&nbsp;target,&nbsp;method,&nbsp;args,&nbsp;targetClass,&nbsp;chain);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;====&nbsp;这才是真正调用的地方&nbsp;====</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;Proceed&nbsp;to&nbsp;the&nbsp;joinpoint&nbsp;through&nbsp;the&nbsp;interceptor&nbsp;chain.</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retVal&nbsp;=&nbsp;invocation.proceed();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;Massage&nbsp;return&nbsp;value&nbsp;if&nbsp;necessary.</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Class&lt;?&gt;&nbsp;returnType&nbsp;=&nbsp;method.getReturnType();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(retVal&nbsp;!=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>&nbsp;&amp;&amp;&nbsp;retVal&nbsp;==&nbsp;target&nbsp;&amp;&amp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;returnType&nbsp;!=&nbsp;Object<span class=\"hljs-class\" style=\"line-height: 26px;\">.<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">class</span>&nbsp;&amp;&amp;&nbsp;<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">returnType</span>.<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">isInstance</span>(<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">proxy</span>)&nbsp;&amp;&amp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;!<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">RawTargetAccess</span>.<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">class</span>.<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">isAssignableFrom</span>(<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">method</span>.<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">getDeclaringClass</span>()))&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retVal&nbsp;=&nbsp;proxy;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">else</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(retVal&nbsp;==&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>&nbsp;&amp;&amp;&nbsp;returnType&nbsp;!=&nbsp;Void.TYPE&nbsp;&amp;&amp;&nbsp;returnType.isPrimitive())&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">throw</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;AopInvocationException(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"Null&nbsp;return&nbsp;value&nbsp;from&nbsp;advice&nbsp;does&nbsp;not&nbsp;match&nbsp;primitive&nbsp;return&nbsp;type&nbsp;for:&nbsp;\"</span>&nbsp;+&nbsp;method);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;retVal;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">finally</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(target&nbsp;!=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>&nbsp;&amp;&amp;&nbsp;!targetSource.isStatic())&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;Must&nbsp;have&nbsp;come&nbsp;from&nbsp;TargetSource.</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;targetSource.releaseTarget(target);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(setProxyContext)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;Restore&nbsp;old&nbsp;proxy.</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AopContext.setCurrentProxy(oldProxy);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br><br><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;这里主要还是起一个数据的载体的左右</span><br><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;便于下文的统一调用</span><br><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">protected</span>&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">ReflectiveMethodInvocation</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Object&nbsp;proxy,&nbsp;@Nullable&nbsp;Object&nbsp;target,&nbsp;Method&nbsp;method,&nbsp;@Nullable&nbsp;Object[]&nbsp;arguments,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@Nullable&nbsp;Class&lt;?&gt;&nbsp;targetClass,&nbsp;List&lt;Object&gt;&nbsp;interceptorsAndDynamicMethodMatchers)</span>&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.proxy&nbsp;=&nbsp;proxy;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.target&nbsp;=&nbsp;target;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.targetClass&nbsp;=&nbsp;targetClass;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.method&nbsp;=&nbsp;BridgeMethodResolver.findBridgedMethod(method);<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.arguments&nbsp;=&nbsp;AopProxyUtils.adaptArgumentsIfNecessary(method,&nbsp;arguments);<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.interceptorsAndDynamicMethodMatchers&nbsp;=&nbsp;interceptorsAndDynamicMethodMatchers;<br>}<br></code></pre> \n<h4 data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; display: block;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"font-size: 18px; color: rgb(0, 0, 0); line-height: 1.5em; letter-spacing: 0em; text-align: left; font-weight: bold; display: block;\">3、proceed</span><span class=\"suffix\" style=\"display: none;\"></span></h4> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">上面的方法中最主要的工作就是创建了一个拦截器链，并使用ReflectiveMethodInvocation类进行了链的封装，而在ReflectiveMethodInvocation类的proceed方法中实现了拦截器的逐一调用。</p> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">继续探究，在proceed方法中是怎么实现前置增强在目标方法前调用，后置增强在目标方法后调用的逻辑。</p> \n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left; margin-top: 10px; margin-bottom: 10px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; padding-top: 15px; background: #282c34; border-radius: 5px; display: -webkit-box; font-family: Consolas, Monaco, Menlo, monospace; font-size: 12px;\"><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;回想起以下之前JDK实现代理的例子</span><br><span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Override</span><br><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;Object&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">invoke</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Object&nbsp;proxy,&nbsp;Method&nbsp;method,&nbsp;Object[]&nbsp;args)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">throws</span>&nbsp;Throwable&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;底层还是通过反射</span><br>&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"====&nbsp;before&nbsp;====\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;Object&nbsp;result&nbsp;=&nbsp;method.invoke(target,&nbsp;args);<br>&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"====&nbsp;after&nbsp;====\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;result;<br>}<br><br><span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Override</span><br><span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Nullable</span><br><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;那么这里大致逻辑应该和上面是一样的</span><br><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;假设这里有3个我们自定义的增强器，分别是@Before、@After、@AfterReturing</span><br><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;那么我们期望的顺序是最开始是&nbsp;ExposeInvocationInterceptor、先执行@Before、再执行method、再执行@After</span><br><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;然而真实情况却不是有序的</span><br><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;Object&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">proceed</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">throws</span>&nbsp;Throwable&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;We&nbsp;start&nbsp;with&nbsp;an&nbsp;index&nbsp;of&nbsp;-1&nbsp;and&nbsp;increment&nbsp;early.</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;通过数组下标遍历增强器，默认从-1开始，统一调用入口均为MethodInterceptor接口的invoke方法</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;如果这个条件成立，说明已遍历完所有拦截器，开始真正调用代理方法了</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.currentInterceptorIndex&nbsp;==&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.interceptorsAndDynamicMethodMatchers.size()&nbsp;-&nbsp;<span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">1</span>)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;调用代理方法</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;invokeJoinpoint();<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;第一个拦截器/增强器肯定是&nbsp;ExposeInvocationInterceptor</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;值得一提的是，这里的拦截器是无序的，所以，如何正确有序的应用这些增强是一个问题！</span><br>&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;获取下一个要执行的拦截器</span><br>&nbsp;&nbsp;&nbsp;&nbsp;Object&nbsp;interceptorOrInterceptionAdvice&nbsp;=<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.interceptorsAndDynamicMethodMatchers.get(++<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.currentInterceptorIndex);<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(interceptorOrInterceptionAdvice&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">instanceof</span>&nbsp;InterceptorAndDynamicMethodMatcher)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;Evaluate&nbsp;dynamic&nbsp;method&nbsp;matcher&nbsp;here:&nbsp;static&nbsp;part&nbsp;will&nbsp;already&nbsp;have</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;been&nbsp;evaluated&nbsp;and&nbsp;found&nbsp;to&nbsp;match.</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;InterceptorAndDynamicMethodMatcher&nbsp;dm&nbsp;=<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(InterceptorAndDynamicMethodMatcher)&nbsp;interceptorOrInterceptionAdvice;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Class&lt;?&gt;&nbsp;targetClass&nbsp;=&nbsp;(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.targetClass&nbsp;!=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>&nbsp;?&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.targetClass&nbsp;:&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.method.getDeclaringClass());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(dm.methodMatcher.matches(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.method,&nbsp;targetClass,&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.arguments))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;dm.interceptor.invoke(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">else</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;Dynamic&nbsp;matching&nbsp;failed.</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;Skip&nbsp;this&nbsp;interceptor&nbsp;and&nbsp;invoke&nbsp;the&nbsp;next&nbsp;in&nbsp;the&nbsp;chain.</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;不匹配则不执行拦截器</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;proceed();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">else</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;It's&nbsp;an&nbsp;interceptor,&nbsp;so&nbsp;we&nbsp;just&nbsp;invoke&nbsp;it:&nbsp;The&nbsp;pointcut&nbsp;will&nbsp;have</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;been&nbsp;evaluated&nbsp;statically&nbsp;before&nbsp;this&nbsp;object&nbsp;was&nbsp;constructed.</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;普通拦截器，直接调用拦截器</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;将this作为参数传递一保证当前实例中调用链的执行</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;((MethodInterceptor)&nbsp;interceptorOrInterceptionAdvice).invoke(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br><br><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;来自ExposeInvocationInterceptor</span><br><span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Override</span><br><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;Object&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">invoke</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(MethodInvocation&nbsp;mi)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">throws</span>&nbsp;Throwable&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;mi就是之前的this，即ReflectiveMethodInvocation</span><br>&nbsp;&nbsp;&nbsp;&nbsp;MethodInvocation&nbsp;oldInvocation&nbsp;=&nbsp;invocation.get();<br>&nbsp;&nbsp;&nbsp;&nbsp;invocation.set(mi);<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">try</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;因此这一步又回到了之前的proceed</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;mi.proceed();<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">finally</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;invocation.set(oldInvocation);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br><br><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;继续调用下一个拦截器</span><br><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;来自MethodBeforeAdviceInterceptor</span><br><span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Override</span><br><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;Object&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">invoke</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(MethodInvocation&nbsp;mi)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">throws</span>&nbsp;Throwable&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;before的逻辑调用</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advice.before(mi.getMethod(),&nbsp;mi.getArguments(),&nbsp;mi.getThis());<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;继续调用下一个</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;mi.proceed();<br>}<br><br><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;来自AfterReturningAdviceInterceptor</span><br><span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Override</span><br><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;Object&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">invoke</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(MethodInvocation&nbsp;mi)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">throws</span>&nbsp;Throwable&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;再继续往下调，思想是动态规划</span><br>&nbsp;&nbsp;&nbsp;&nbsp;Object&nbsp;retVal&nbsp;=&nbsp;mi.proceed();<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;注意这里的调用顺序</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advice.afterReturning(retVal,&nbsp;mi.getMethod(),&nbsp;mi.getArguments(),&nbsp;mi.getThis());<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;这里是返回结果</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;retVal;<br>}<br><br><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;来自AspectJAfterAdvice</span><br><span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Override</span><br><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;Object&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">invoke</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(MethodInvocation&nbsp;mi)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">throws</span>&nbsp;Throwable&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">try</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;mi.proceed();<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">finally</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;注意这里的finally代码块</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;invokeAdviceMethod(getJoinPointMatch(),&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>,&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br><br><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;来自AfterReturningAdviceInterceptor</span><br><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;这里还可以来个before，为什么呢，因为最终的调用逻辑实在遍历完所有拦截器后再真正调用</span><br><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;熟悉算法的读者，应该不难看出这是动态规划的思想，很奇妙的应用</span><br><span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Override</span><br><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;Object&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">invoke</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(MethodInvocation&nbsp;mi)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">throws</span>&nbsp;Throwable&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advice.before(mi.getMethod(),&nbsp;mi.getArguments(),&nbsp;mi.getThis());<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;mi.proceed();<br>}<br></code></pre> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">在proceed方法中，或许代码逻辑并没有我们想象得那么复杂（包含了一点动态规划的算法思想在里面），ReflectiveMethodInvocation中的主要职责是维护链接调用的计数器，记录当前调用链接的位置，以便链可以有序地进行下去，那么在这个方法中并没有我们之前设想的维护各种增强的顺序，而是将此工作委托给了各个增强器，使各个增强器在内部逻辑实现。</p> \n<h4 data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; display: block;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"font-size: 18px; color: rgb(0, 0, 0); line-height: 1.5em; letter-spacing: 0em; text-align: left; font-weight: bold; display: block;\">4、invokeJoinpoint</span><span class=\"suffix\" style=\"display: none;\"></span></h4> \n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left; margin-top: 10px; margin-bottom: 10px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; padding-top: 15px; background: #282c34; border-radius: 5px; display: -webkit-box; font-family: Consolas, Monaco, Menlo, monospace; font-size: 12px;\"><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;这才是隐藏在幕后的最大boss！！！</span><br><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;打个广告，关注微信公众号：好看的HK，第一时间掌握最新动态！</span><br><span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Nullable</span><br><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">protected</span>&nbsp;Object&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">invokeJoinpoint</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">throws</span>&nbsp;Throwable&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;AopUtils.invokeJoinpointUsingReflection(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.target,&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.method,&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.arguments);<br>}<br><br><span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Nullable</span><br><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">static</span>&nbsp;Object&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">invokeJoinpointUsingReflection</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(@Nullable&nbsp;Object&nbsp;target,&nbsp;Method&nbsp;method,&nbsp;Object[]&nbsp;args)</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">throws</span>&nbsp;Throwable&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;Use&nbsp;reflection&nbsp;to&nbsp;invoke&nbsp;the&nbsp;method.</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">try</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;熟悉的代码</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ReflectionUtils.makeAccessible(method);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;method.invoke(target,&nbsp;args);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">catch</span>&nbsp;(InvocationTargetException&nbsp;ex)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;Invoked&nbsp;method&nbsp;threw&nbsp;a&nbsp;checked&nbsp;exception.</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;We&nbsp;must&nbsp;rethrow&nbsp;it.&nbsp;The&nbsp;client&nbsp;won't&nbsp;see&nbsp;the&nbsp;interceptor.</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">throw</span>&nbsp;ex.getTargetException();<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">catch</span>&nbsp;(IllegalArgumentException&nbsp;ex)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">throw</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;AopInvocationException(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"AOP&nbsp;configuration&nbsp;seems&nbsp;to&nbsp;be&nbsp;invalid:&nbsp;tried&nbsp;calling&nbsp;method&nbsp;[\"</span>&nbsp;+<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;method&nbsp;+&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"]&nbsp;on&nbsp;target&nbsp;[\"</span>&nbsp;+&nbsp;target&nbsp;+&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"]\"</span>,&nbsp;ex);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">catch</span>&nbsp;(IllegalAccessException&nbsp;ex)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">throw</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;AopInvocationException(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"Could&nbsp;not&nbsp;access&nbsp;method&nbsp;[\"</span>&nbsp;+&nbsp;method&nbsp;+&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"]\"</span>,&nbsp;ex);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre> \n<h4 data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; display: block;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"font-size: 18px; color: rgb(0, 0, 0); line-height: 1.5em; letter-spacing: 0em; text-align: left; font-weight: bold; display: block;\">5、getProxy（CGLIB）</span><span class=\"suffix\" style=\"display: none;\"></span></h4> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">再来看一下CGLIB的代理实现，如下</p> \n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left; margin-top: 10px; margin-bottom: 10px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; padding-top: 15px; background: #282c34; border-radius: 5px; display: -webkit-box; font-family: Consolas, Monaco, Menlo, monospace; font-size: 12px;\"><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;有了之前的基础，再看CGLIB就好多了，还是先看下之前的示例</span><br><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">CglibProxyTest</span>&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">main</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String[]&nbsp;args)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Enhancer&nbsp;enhancer&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;Enhancer();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;注意这里并不需要事先初始化代理对象</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;enhancer.setSuperclass(CglibProxyTest<span class=\"hljs-class\" style=\"line-height: 26px;\">.<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">class</span>)</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;enhancer.setCallback(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;MethodInterceptorImpl());<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CglibProxyTest&nbsp;cglibProxyTest&nbsp;=&nbsp;(CglibProxyTest)&nbsp;enhancer.create();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cglibProxyTest.test();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(cglibProxyTest);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">test</span>&nbsp;<span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"CglibProxyTest&nbsp;test()\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">MethodInterceptorImpl</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">implements</span>&nbsp;<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">MethodInterceptor</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;Object&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">intercept</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Object&nbsp;obj,&nbsp;Method&nbsp;method,&nbsp;Object[]&nbsp;args,&nbsp;MethodProxy&nbsp;proxy)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">throws</span>&nbsp;Throwable&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"before&nbsp;invoke&nbsp;\"</span>&nbsp;+&nbsp;method);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Object&nbsp;result&nbsp;=&nbsp;proxy.invokeSuper(obj,&nbsp;args);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"after&nbsp;invoke&nbsp;\"</span>&nbsp;+&nbsp;method);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;result;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br><br><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;CGLIB开始创建代理</span><br><span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Override</span><br><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;Object&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">getProxy</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(@Nullable&nbsp;ClassLoader&nbsp;classLoader)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(logger.isTraceEnabled())&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;logger.trace(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"Creating&nbsp;CGLIB&nbsp;proxy:&nbsp;\"</span>&nbsp;+&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advised.getTargetSource());<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">try</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Class&lt;?&gt;&nbsp;rootClass&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advised.getTargetClass();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Assert.state(rootClass&nbsp;!=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>,&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"Target&nbsp;class&nbsp;must&nbsp;be&nbsp;available&nbsp;for&nbsp;creating&nbsp;a&nbsp;CGLIB&nbsp;proxy\"</span>);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Class&lt;?&gt;&nbsp;proxySuperClass&nbsp;=&nbsp;rootClass;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(rootClass.getName().contains(ClassUtils.CGLIB_CLASS_SEPARATOR))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;proxySuperClass&nbsp;=&nbsp;rootClass.getSuperclass();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Class&lt;?&gt;[]&nbsp;additionalInterfaces&nbsp;=&nbsp;rootClass.getInterfaces();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">for</span>&nbsp;(Class&lt;?&gt;&nbsp;additionalInterface&nbsp;:&nbsp;additionalInterfaces)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advised.addInterface(additionalInterface);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;Validate&nbsp;the&nbsp;class,&nbsp;writing&nbsp;log&nbsp;messages&nbsp;as&nbsp;necessary.</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;validateClassIfNecessary(proxySuperClass,&nbsp;classLoader);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;Configure&nbsp;CGLIB&nbsp;Enhancer...</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;第一步创建new&nbsp;Enhancer</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Enhancer&nbsp;enhancer&nbsp;=&nbsp;createEnhancer();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(classLoader&nbsp;!=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;enhancer.setClassLoader(classLoader);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(classLoader&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">instanceof</span>&nbsp;SmartClassLoader&nbsp;&amp;&amp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((SmartClassLoader)&nbsp;classLoader).isClassReloadable(proxySuperClass))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;enhancer.setUseCache(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">false</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;第二步设置代理类父类、父接口</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;enhancer.setSuperclass(proxySuperClass);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;注意这里又加入Spring内置的接口，区别于JDK，这里只有两个SpringAop、Advised，而没有DecoratingProxy</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;enhancer.setInterfaces(AopProxyUtils.completeProxiedInterfaces(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advised));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;enhancer.setStrategy(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;ClassLoaderAwareGeneratorStrategy(classLoader));<br>&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;第三步设置Callback</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Callback[]&nbsp;callbacks&nbsp;=&nbsp;getCallbacks(rootClass);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Class&lt;?&gt;[]&nbsp;types&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;Class&lt;?&gt;[callbacks.length];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">for</span>&nbsp;(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">int</span>&nbsp;x&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">0</span>;&nbsp;x&nbsp;&lt;&nbsp;types.length;&nbsp;x++)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;types[x]&nbsp;=&nbsp;callbacks[x].getClass();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;fixedInterceptorMap&nbsp;only&nbsp;populated&nbsp;at&nbsp;this&nbsp;point,&nbsp;after&nbsp;getCallbacks&nbsp;call&nbsp;above</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;enhancer.setCallbackFilter(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;ProxyCallbackFilter(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advised.getConfigurationOnlyCopy(),&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.fixedInterceptorMap,&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.fixedInterceptorOffset));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;enhancer.setCallbackTypes(types);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;Generate&nbsp;the&nbsp;proxy&nbsp;class&nbsp;and&nbsp;create&nbsp;a&nbsp;proxy&nbsp;instance.</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;createProxyClassAndInstance(enhancer,&nbsp;callbacks);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">catch</span>&nbsp;(CodeGenerationException&nbsp;|&nbsp;IllegalArgumentException&nbsp;ex)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">throw</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;AopConfigException(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"Could&nbsp;not&nbsp;generate&nbsp;CGLIB&nbsp;subclass&nbsp;of&nbsp;\"</span>&nbsp;+&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advised.getTargetClass()&nbsp;+<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\":&nbsp;Common&nbsp;causes&nbsp;of&nbsp;this&nbsp;problem&nbsp;include&nbsp;using&nbsp;a&nbsp;final&nbsp;class&nbsp;or&nbsp;a&nbsp;non-visible&nbsp;class\"</span>,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ex);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">catch</span>&nbsp;(Throwable&nbsp;ex)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;TargetSource.getTarget()&nbsp;failed</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">throw</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;AopConfigException(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"Unexpected&nbsp;AOP&nbsp;exception\"</span>,&nbsp;ex);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">以上方法完整地阐述了一个创建Spring中的Enhancer的过程，读者可以参考Enhancer的文档查看每个步骤的含义，这里最重要的是通过getCallbacks方法设置拦截器链。</p> \n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left; margin-top: 10px; margin-bottom: 10px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; padding-top: 15px; background: #282c34; border-radius: 5px; display: -webkit-box; font-family: Consolas, Monaco, Menlo, monospace; font-size: 12px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">private</span>&nbsp;Callback[]&nbsp;getCallbacks(Class&lt;?&gt;&nbsp;rootClass)&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">throws</span>&nbsp;Exception&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;Parameters&nbsp;used&nbsp;for&nbsp;optimization&nbsp;choices...</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">boolean</span>&nbsp;exposeProxy&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advised.isExposeProxy();<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">boolean</span>&nbsp;isFrozen&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advised.isFrozen();<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">boolean</span>&nbsp;isStatic&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advised.getTargetSource().isStatic();<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;Choose&nbsp;an&nbsp;\"aop\"&nbsp;interceptor&nbsp;(used&nbsp;for&nbsp;AOP&nbsp;calls).</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;一般就是这个了</span><br>&nbsp;&nbsp;&nbsp;&nbsp;Callback&nbsp;aopInterceptor&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;DynamicAdvisedInterceptor(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advised);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;Choose&nbsp;a&nbsp;\"straight&nbsp;to&nbsp;target\"&nbsp;interceptor.&nbsp;(used&nbsp;for&nbsp;calls&nbsp;that&nbsp;are</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;unadvised&nbsp;but&nbsp;can&nbsp;return&nbsp;this).&nbsp;May&nbsp;be&nbsp;required&nbsp;to&nbsp;expose&nbsp;the&nbsp;proxy.</span><br>&nbsp;&nbsp;&nbsp;&nbsp;Callback&nbsp;targetInterceptor;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(exposeProxy)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;targetInterceptor&nbsp;=&nbsp;(isStatic&nbsp;?<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;StaticUnadvisedExposedInterceptor(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advised.getTargetSource().getTarget())&nbsp;:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;DynamicUnadvisedExposedInterceptor(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advised.getTargetSource()));<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">else</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;targetInterceptor&nbsp;=&nbsp;(isStatic&nbsp;?<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;StaticUnadvisedInterceptor(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advised.getTargetSource().getTarget())&nbsp;:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;DynamicUnadvisedInterceptor(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advised.getTargetSource()));<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;Choose&nbsp;a&nbsp;\"direct&nbsp;to&nbsp;target\"&nbsp;dispatcher&nbsp;(used&nbsp;for</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;unadvised&nbsp;calls&nbsp;to&nbsp;static&nbsp;targets&nbsp;that&nbsp;cannot&nbsp;return&nbsp;this).</span><br>&nbsp;&nbsp;&nbsp;&nbsp;Callback&nbsp;targetDispatcher&nbsp;=&nbsp;(isStatic&nbsp;?<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;StaticDispatcher(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advised.getTargetSource().getTarget())&nbsp;:&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;SerializableNoOp());<br><br>&nbsp;&nbsp;&nbsp;&nbsp;Callback[]&nbsp;mainCallbacks&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;Callback[]&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;注意这行注释</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;aopInterceptor,&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;for&nbsp;normal&nbsp;advice</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;targetInterceptor,&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;invoke&nbsp;target&nbsp;without&nbsp;considering&nbsp;advice,&nbsp;if&nbsp;optimized</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;SerializableNoOp(),&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;no&nbsp;override&nbsp;for&nbsp;methods&nbsp;mapped&nbsp;to&nbsp;this</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;targetDispatcher,&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advisedDispatcher,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;EqualsInterceptor(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advised),<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;HashCodeInterceptor(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advised)<br>&nbsp;&nbsp;&nbsp;&nbsp;};<br><br>&nbsp;&nbsp;&nbsp;&nbsp;Callback[]&nbsp;callbacks;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;If&nbsp;the&nbsp;target&nbsp;is&nbsp;a&nbsp;static&nbsp;one&nbsp;and&nbsp;the&nbsp;advice&nbsp;chain&nbsp;is&nbsp;frozen,</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;then&nbsp;we&nbsp;can&nbsp;make&nbsp;some&nbsp;optimizations&nbsp;by&nbsp;sending&nbsp;the&nbsp;AOP&nbsp;calls</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;direct&nbsp;to&nbsp;the&nbsp;target&nbsp;using&nbsp;the&nbsp;fixed&nbsp;chain&nbsp;for&nbsp;that&nbsp;method.</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(isStatic&nbsp;&amp;&amp;&nbsp;isFrozen)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method[]&nbsp;methods&nbsp;=&nbsp;rootClass.getMethods();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Callback[]&nbsp;fixedCallbacks&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;Callback[methods.length];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.fixedInterceptorMap&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;HashMap&lt;&gt;(methods.length);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;<span class=\"hljs-doctag\" style=\"color: #c678dd; line-height: 26px;\">TODO:</span>&nbsp;small&nbsp;memory&nbsp;optimization&nbsp;here&nbsp;(can&nbsp;skip&nbsp;creation&nbsp;for&nbsp;methods&nbsp;with&nbsp;no&nbsp;advice)</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">for</span>&nbsp;(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">int</span>&nbsp;x&nbsp;=&nbsp;<span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">0</span>;&nbsp;x&nbsp;&lt;&nbsp;methods.length;&nbsp;x++)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Method&nbsp;method&nbsp;=&nbsp;methods[x];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&lt;Object&gt;&nbsp;chain&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advised.getInterceptorsAndDynamicInterceptionAdvice(method,&nbsp;rootClass);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fixedCallbacks[x]&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;FixedChainStaticTargetInterceptor(<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;chain,&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advised.getTargetSource().getTarget(),&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advised.getTargetClass());<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.fixedInterceptorMap.put(method,&nbsp;x);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;Now&nbsp;copy&nbsp;both&nbsp;the&nbsp;callbacks&nbsp;from&nbsp;mainCallbacks</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;and&nbsp;fixedCallbacks&nbsp;into&nbsp;the&nbsp;callbacks&nbsp;array.</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;callbacks&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;Callback[mainCallbacks.length&nbsp;+&nbsp;fixedCallbacks.length];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(mainCallbacks,&nbsp;<span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">0</span>,&nbsp;callbacks,&nbsp;<span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">0</span>,&nbsp;mainCallbacks.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.arraycopy(fixedCallbacks,&nbsp;<span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">0</span>,&nbsp;callbacks,&nbsp;mainCallbacks.length,&nbsp;fixedCallbacks.length);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.fixedInterceptorOffset&nbsp;=&nbsp;mainCallbacks.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">else</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;callbacks&nbsp;=&nbsp;mainCallbacks;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;callbacks;<br>}<br></code></pre> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">在getCallback中Spring考虑了很多情况，但是对于我们来说，只需要理解最常用的的就可以了。</p> \n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left; margin-top: 10px; margin-bottom: 10px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; padding-top: 15px; background: #282c34; border-radius: 5px; display: -webkit-box; font-family: Consolas, Monaco, Menlo, monospace; font-size: 12px;\"><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;来自类&nbsp;DynamicAdvisedInterceptor</span><br><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;这里的逻辑跟之前JDK的逻辑是大同小异的，熟悉代码逻辑</span><br><span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Override</span><br><span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Nullable</span><br><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;Object&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">intercept</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Object&nbsp;proxy,&nbsp;Method&nbsp;method,&nbsp;Object[]&nbsp;args,&nbsp;MethodProxy&nbsp;methodProxy)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">throws</span>&nbsp;Throwable&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;Object&nbsp;oldProxy&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">boolean</span>&nbsp;setProxyContext&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">false</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;Object&nbsp;target&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;TargetSource&nbsp;targetSource&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advised.getTargetSource();<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">try</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advised.exposeProxy)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;Make&nbsp;invocation&nbsp;available&nbsp;if&nbsp;necessary.</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;oldProxy&nbsp;=&nbsp;AopContext.setCurrentProxy(proxy);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setProxyContext&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">true</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;Get&nbsp;as&nbsp;late&nbsp;as&nbsp;possible&nbsp;to&nbsp;minimize&nbsp;the&nbsp;time&nbsp;we&nbsp;\"own\"&nbsp;the&nbsp;target,&nbsp;in&nbsp;case&nbsp;it&nbsp;comes&nbsp;from&nbsp;a&nbsp;pool...</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;target&nbsp;=&nbsp;targetSource.getTarget();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Class&lt;?&gt;&nbsp;targetClass&nbsp;=&nbsp;(target&nbsp;!=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>&nbsp;?&nbsp;target.getClass()&nbsp;:&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;获取拦截器/增强器链</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List&lt;Object&gt;&nbsp;chain&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.advised.getInterceptorsAndDynamicInterceptionAdvice(method,&nbsp;targetClass);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Object&nbsp;retVal;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;Check&nbsp;whether&nbsp;we&nbsp;only&nbsp;have&nbsp;one&nbsp;InvokerInterceptor:&nbsp;that&nbsp;is,</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;no&nbsp;real&nbsp;advice,&nbsp;but&nbsp;just&nbsp;reflective&nbsp;invocation&nbsp;of&nbsp;the&nbsp;target.</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(chain.isEmpty()&nbsp;&amp;&amp;&nbsp;Modifier.isPublic(method.getModifiers()))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Object[]&nbsp;argsToUse&nbsp;=&nbsp;AopProxyUtils.adaptArgumentsIfNecessary(method,&nbsp;args);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retVal&nbsp;=&nbsp;methodProxy.invoke(target,&nbsp;argsToUse);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">else</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;We&nbsp;need&nbsp;to&nbsp;create&nbsp;a&nbsp;method&nbsp;invocation...</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;ReflectiveMethodInvocation变成了ReflectiveMethodInvocation</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;CglibMethodInvocation继承自ReflectiveMethodInvocation</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;注意这里的proceed方法，有意思吧</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retVal&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;CglibMethodInvocation(proxy,&nbsp;target,&nbsp;method,&nbsp;args,&nbsp;targetClass,&nbsp;chain,&nbsp;methodProxy).proceed();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;retVal&nbsp;=&nbsp;processReturnType(proxy,&nbsp;target,&nbsp;method,&nbsp;retVal);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;retVal;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">finally</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(target&nbsp;!=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>&nbsp;&amp;&amp;&nbsp;!targetSource.isStatic())&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;targetSource.releaseTarget(target);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(setProxyContext)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;Restore&nbsp;old&nbsp;proxy.</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AopContext.setCurrentProxy(oldProxy);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br><br><span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;至此，整个动态代理分析完毕</span><br><span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Override</span><br><span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Nullable</span><br><span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;Object&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">proceed</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">throws</span>&nbsp;Throwable&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">try</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">super</span>.proceed();<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">catch</span>&nbsp;(RuntimeException&nbsp;ex)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">throw</span>&nbsp;ex;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">catch</span>&nbsp;(Exception&nbsp;ex)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">if</span>&nbsp;(ReflectionUtils.declaresException(getMethod(),&nbsp;ex.getClass()))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">throw</span>&nbsp;ex;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">else</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">throw</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;UndeclaredThrowableException(ex);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">上述的实现与JDK方式实现代理中的invoke方法大同小异，都是首先构造，然后封装此链进行串联调用，稍有些区别就是在JDK中直接构造ReflectiveMethodInvocation，而在CGLIB中是使用CglibMethodInvocation。CglibMethodInvocation继承自ReflectiveMethodInvocation，但是proceed方法并没有重写。</p> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">ps：如果还是没理解，可以再看上一章节的 SysAdvisor，再跟下源码，会好懂很多。</p> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">总结就不写了吧，只能说豁然开朗！希望对读者有所帮助。</p>",
                "title": "Spring源码(七)：Spring AOP(二)",
                "categoryId": 1,
                "categoryName": "后端",
                "tagId": 100,
                "tagName": "后端",
                "userId": 22324,
                "userOutId": "674354023818",
                "username": "年轻真好1997",
                "avatar": "http://thirdwx.qlogo.cn/mmopen/RtaPOQGxiaviciauZEGQXNGyialgbicibicVwibN1URYrILZreTMYlluGT3q4RKRFvPRW4NXpAxHXDpCqJJibAfjWatjam2XHicpjwo4gk/132",
                "description": "承接上文，本篇我们深入源码层面，看下Spring是如何实现AOP的。一、示例代码先从一段简单的示例代码入手。如下public&nbsp;class&nbsp;TestBean&nbsp;{&nbsp;",
                "level": 1,
                "publishTime": "2024/09/05",
                "readingNum": 5,
                "likeNum": 0,
                "introduction": null,
                "followWords": null,
                "followPic": null,
                "isFollowing": false,
                "isLike": false,
                "isSelf": false,
                "type": 1,
                "isVisible": true,
                "invisibleReason": null,
                "writingColumn": {
                    "columnOutId": "9d41b0435f2643d3b8c1fa5030265cbe",
                    "name": "默认专栏",
                    "briefIntro": "这是一个默认专栏",
                    "cover": "https://files.mdnice.com/common/community/default-column-cover.jpg",
                    "writingNum": 9,
                    "createTime": "2024-08-06 19:06"
                }
            }
        },
        "__N_SSP": true
    },
    "page": "/writing/[id]",
    "query": {
        "id": "ff43e5b5002d4e78afc128c7f2b7c961"
    },
    "buildId": "ErZPkD4oq6iwH2nj6Dpcx",
    "isFallback": false,
    "gssp": true,
    "appGip": true
}