{
    "props": {
        "pageProps": {
            "query": {
                "id": "9b3da4cd59af416cb267e523281b6b9e"
            },
            "ieBrowser": false,
            "needRefresh": false,
            "writingDetail": {
                "id": 85144,
                "outId": "9b3da4cd59af416cb267e523281b6b9e",
                "articleOutId": "9b3da4cd59af416cb267e523281b6b9e",
                "html": "<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">Bean大家应该都了解，鉴于前面的文章介绍的细节过于纵向，因此我们单独开一篇文章介绍Spring Bean的全生命周期。从横向的视角，来看看在Bean初始化、填充属性、实例化的各个环节，我们都可以做哪些事情。</p> \n<h2 data-tool=\"mdnice编辑器\" style=\"border-bottom-color: rgb(239, 112, 96); margin-top: 30px; margin-bottom: 15px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; align-items: unset; background-attachment: scroll; background-clip: border-box; background-color: unset; background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; border-top-style: none; border-bottom-style: solid; border-left-style: none; border-right-style: none; border-top-width: 1px; border-bottom-width: 2px; border-left-width: 1px; border-right-width: 1px; border-top-color: rgb(0, 0, 0); border-left-color: rgb(0, 0, 0); border-right-color: rgb(0, 0, 0); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-left-radius: 0px; border-bottom-right-radius: 0px; box-shadow: none; display: flex; flex-direction: unset; float: unset; height: auto; justify-content: unset; line-height: 1.1em; overflow-x: unset; overflow-y: unset; position: relative; text-align: left; text-shadow: none; transform: none; width: auto; -webkit-box-reflect: unset;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"font-size: 22px; color: rgb(255, 255, 255); background-color: rgb(239, 112, 96); line-height: 1.5em; letter-spacing: 0em; align-items: unset; background-attachment: scroll; background-clip: border-box; background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-right-width: 1px; border-top-color: rgb(0, 0, 0); border-bottom-color: rgb(0, 0, 0); border-left-color: rgb(0, 0, 0); border-right-color: rgb(0, 0, 0); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-left-radius: 0px; border-bottom-right-radius: 0px; box-shadow: none; display: inline-block; font-weight: bold; flex-direction: unset; float: unset; height: auto; justify-content: unset; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 5px; overflow-x: unset; overflow-y: unset; padding-top: 3px; padding-bottom: 1px; padding-left: 10px; padding-right: 10px; position: relative; text-align: left; text-indent: 0em; text-shadow: none; transform: none; width: auto; -webkit-box-reflect: unset;\">一、一个类</span><span class=\"suffix\" style=\"display: none;\"></span><span style=\"border-bottom-color: rgb(239, 235, 233); align-items: unset; background-attachment: scroll; background-clip: border-box; background-color: unset; background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; border-top-style: none; border-bottom-style: solid; border-left-style: none; border-right-style: solid; border-top-width: 1px; border-bottom-width: 36px; border-left-width: 1px; border-right-width: 20px; border-top-color: rgb(0, 0, 0); border-left-color: rgb(0, 0, 0); border-right-color: transparent; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-left-radius: 0px; border-bottom-right-radius: 0px; box-shadow: none; color: rgb(0, 0, 0); display: inline-block; font-size: 16px; font-weight: bold; flex-direction: unset; float: unset; height: auto; justify-content: unset; letter-spacing: 0px; line-height: 1.1em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; overflow-x: unset; overflow-y: unset; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; position: relative; text-align: left; text-indent: 0em; text-shadow: none; transform: none; width: auto; -webkit-box-reflect: unset;\"> </span></h2> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">理论前面已经讲得够多了，这次我们直接上测试代码，如下</p> \n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left; margin-top: 10px; margin-bottom: 10px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; padding-top: 15px; background: #282c34; border-radius: 5px; display: -webkit-box; font-family: Consolas, Monaco, Menlo, monospace; font-size: 12px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">import</span>&nbsp;org.springframework.beans.BeansException;<br><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">import</span>&nbsp;org.springframework.beans.PropertyValues;<br><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">import</span>&nbsp;org.springframework.beans.factory.DisposableBean;<br><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">import</span>&nbsp;org.springframework.beans.factory.InitializingBean;<br><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">import</span>&nbsp;org.springframework.beans.factory.annotation.Autowired;<br><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">import</span>&nbsp;org.springframework.beans.factory.config.BeanPostProcessor;<br><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">import</span>&nbsp;org.springframework.beans.factory.config.DestructionAwareBeanPostProcessor;<br><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">import</span>&nbsp;org.springframework.beans.factory.config.InstantiationAwareBeanPostProcessor;<br><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">import</span>&nbsp;org.springframework.beans.factory.config.SmartInstantiationAwareBeanPostProcessor;<br><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">import</span>&nbsp;org.springframework.beans.factory.support.MergedBeanDefinitionPostProcessor;<br><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">import</span>&nbsp;org.springframework.beans.factory.support.RootBeanDefinition;<br><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">import</span>&nbsp;org.springframework.context.annotation.AnnotationConfigApplicationContext;<br><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">import</span>&nbsp;org.springframework.context.annotation.Bean;<br><br><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">import</span>&nbsp;java.lang.reflect.Constructor;<br><br><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">BeanLifeCycleTest</span>&nbsp;</span>{<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">main</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String[]&nbsp;args)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AnnotationConfigApplicationContext&nbsp;context&nbsp;=&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;AnnotationConfigApplicationContext(BeanLifeCycleTest<span class=\"hljs-class\" style=\"line-height: 26px;\">.<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">class</span>)</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.registerBeanDefinition(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"testBean\"</span>,&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;RootBeanDefinition(TestBean<span class=\"hljs-class\" style=\"line-height: 26px;\">.<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">class</span>))</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;context.getBean(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"testBean\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Bean</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;SmartInstantiationAwareBeanPostProcessorCls&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">smartInstantiationAwareBeanPostProcessorCls</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;SmartInstantiationAwareBeanPostProcessorCls();<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Bean</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;InstantiationAwareBeanPostProcessorCls&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">instantiationAwareBeanPostProcessorCls</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;InstantiationAwareBeanPostProcessorCls();<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Bean</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;MergedBeanDefinitionPostProcessorCls&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">mergedBeanDefinitionPostProcessorCls</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;MergedBeanDefinitionPostProcessorCls();<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Bean</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;BeanPostProcessorCls&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">beanPostProcessorCls</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;BeanPostProcessorCls();<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Bean</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;DestructionAwareBeanPostProcessorCls&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">destructionAwareBeanPostProcessorCls</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;DestructionAwareBeanPostProcessorCls();<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">TestBean</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">implements</span>&nbsp;<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">InitializingBean</span>,&nbsp;<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">DisposableBean</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Autowired</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">private</span>&nbsp;Animal&nbsp;animal;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">afterPropertiesSet</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">throws</span>&nbsp;Exception&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"-&nbsp;get&nbsp;a&nbsp;animal:&nbsp;\"</span>&nbsp;+&nbsp;animal.name);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"-&nbsp;8.&nbsp;InitializingBean.afterPropertiesSet:已经激活Aware接口且bean所有属性已设置完毕\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">destroy</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">throws</span>&nbsp;Exception&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"F2:DisposableBean.destroy:销毁bean\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;String&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">toString</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"animal&nbsp;name&nbsp;is&nbsp;\"</span>&nbsp;+&nbsp;(animal&nbsp;==&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>&nbsp;?&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>&nbsp;:&nbsp;animal.name);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Bean</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;Animal&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">panda</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">new</span>&nbsp;Animal(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"国宝熊猫\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">Animal</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String&nbsp;name&nbsp;=&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"no&nbsp;name\"</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">Animal</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(String&nbsp;name)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"-&nbsp;3.&nbsp;Animal&nbsp;init：\"</span>&nbsp;+&nbsp;name);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">this</span>.name&nbsp;=&nbsp;name;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;String&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">toString</span><span class=\"hljs-params\" style=\"line-height: 26px;\">()</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"animal&nbsp;name&nbsp;is&nbsp;\"</span>&nbsp;+&nbsp;name;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">SmartInstantiationAwareBeanPostProcessorCls</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">implements</span>&nbsp;<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">SmartInstantiationAwareBeanPostProcessor</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;Class&lt;?&gt;&nbsp;predictBeanType(Class&lt;?&gt;&nbsp;beanClass,&nbsp;String&nbsp;beanName)&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">throws</span>&nbsp;BeansException&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;这个接口主要是spring框架内部来使用</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;用来返回目标对象的类型（比如代理对象通过raw&nbsp;class获取proxy&nbsp;type&nbsp;用于类型匹配）</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"-&nbsp;1.&nbsp;SmartInstantiationAwareBeanPostProcessor.predictBeanType:预测Bean类型:&nbsp;\"</span>&nbsp;+&nbsp;beanName&nbsp;+&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\",&nbsp;\"</span>&nbsp;+&nbsp;beanClass);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;Constructor&lt;?&gt;[]&nbsp;determineCandidateConstructors(Class&lt;?&gt;&nbsp;beanClass,&nbsp;String&nbsp;beanName)&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">throws</span>&nbsp;BeansException&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;这里提供一个拓展点用来解析获取用来实例化的构造器（比如未通过bean定义构造器以及参数的情况下，会根据这个回调来确定构造器）</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"-&nbsp;3.&nbsp;SmartInstantiationAwareBeanPostProcessor.determineCandidateConstructors:确定候选构造器:&nbsp;\"</span>+&nbsp;beanName&nbsp;+&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\",&nbsp;\"</span>&nbsp;+&nbsp;beanClass);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;Object&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">getEarlyBeanReference</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Object&nbsp;bean,&nbsp;String&nbsp;beanName)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">throws</span>&nbsp;BeansException&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;获取要提前暴露的bean的引用，用来支持单例对象的循环引用（一般是bean自身，如果是代理对象则需要取用代理引用）</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"C3\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">InstantiationAwareBeanPostProcessorCls</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">implements</span>&nbsp;<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">InstantiationAwareBeanPostProcessor</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;实例化前后的后处理</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;Object&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">postProcessBeforeInstantiation</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Class&lt;?&gt;&nbsp;beanClass,&nbsp;String&nbsp;beanName)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">throws</span>&nbsp;BeansException&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;这个方法用来在对象实例化前直接返回一个对象（如代理对象）来代替通过内置的实例化流程创建对象；</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"-&nbsp;2.&nbsp;InstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation:实例化之前:&nbsp;\"</span>&nbsp;+&nbsp;beanName&nbsp;+&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\",&nbsp;\"</span>&nbsp;+&nbsp;beanClass);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">null</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">boolean</span>&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">postProcessAfterInstantiation</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Object&nbsp;bean,&nbsp;String&nbsp;beanName)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">throws</span>&nbsp;BeansException&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;在对象实例化完毕，执行populateBean之前，如果返回false则spring不再对对应的bean实例进行自动依赖注入。</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"-&nbsp;5.&nbsp;InstantiationAwareBeanPostProcessor.postProcessAfterInstantiation:实例化完成之后:&nbsp;\"</span>&nbsp;+&nbsp;beanName&nbsp;+&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\",&nbsp;\"</span>&nbsp;+&nbsp;bean);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">true</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;PropertyValues&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">postProcessProperties</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(PropertyValues&nbsp;pvs,&nbsp;Object&nbsp;bean,&nbsp;String&nbsp;beanName)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">throws</span>&nbsp;BeansException&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;这里是在spring处理完默认的成员属性，应用到指定的bean之前进行回调，可以用来检查和修改属性，最终返回的PropertyValues会应用到bean中</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;@Autowired、@Resource等就是根据这个回调来实现最终注入依赖的属性的。</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"-&nbsp;6.&nbsp;InstantiationAwareBeanPostProcessor.postProcessProperties:开始注入/填充属性:&nbsp;\"</span>&nbsp;+&nbsp;beanName&nbsp;+&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\",&nbsp;\"</span>&nbsp;+&nbsp;bean&nbsp;+&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\",&nbsp;\"</span>&nbsp;+&nbsp;pvs);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;pvs;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">MergedBeanDefinitionPostProcessorCls</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">implements</span>&nbsp;<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">MergedBeanDefinitionPostProcessor</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">postProcessMergedBeanDefinition</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(RootBeanDefinition&nbsp;beanDefinition,&nbsp;Class&lt;?&gt;&nbsp;beanType,&nbsp;String&nbsp;beanName)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;在bean实例化完毕后调用&nbsp;可以用来修改merged&nbsp;BeanDefinition的一些properties&nbsp;或者用来给后续回调中缓存一些meta信息使用</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;这个算是将merged&nbsp;BeanDefinition暴露出来的一个回调</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"-&nbsp;4.&nbsp;MergedBeanDefinitionPostProcessor.postProcessMergedBeanDefinition:处理MergedBeanDefinition:&nbsp;\"</span>&nbsp;+&nbsp;beanName&nbsp;+&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\",&nbsp;\"</span>&nbsp;+&nbsp;beanType&nbsp;+&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\",&nbsp;\"</span>&nbsp;+&nbsp;beanDefinition);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">BeanPostProcessorCls</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">implements</span>&nbsp;<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">BeanPostProcessor</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;初始化前后的后处理</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;Object&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">postProcessBeforeInitialization</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Object&nbsp;bean,&nbsp;String&nbsp;beanName)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">throws</span>&nbsp;BeansException&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;该方法在bean实例化完毕（且已经注入完毕），在afterPropertiesSet或自定义init方法执行之前</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"-&nbsp;7.&nbsp;BeanPostProcessor.postProcessBeforeInitialization:BeanPostProcessor:实例化完成，初始化开始:&nbsp;\"</span>&nbsp;+&nbsp;beanName&nbsp;+&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\",&nbsp;\"</span>&nbsp;+&nbsp;bean);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;bean;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;Object&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">postProcessAfterInitialization</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Object&nbsp;bean,&nbsp;String&nbsp;beanName)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">throws</span>&nbsp;BeansException&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;在afterPropertiesSet或自定义init方法执行之后</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"-&nbsp;8.&nbsp;BeanPostProcessor.postProcessAfterInitialization:初始化结束\"</span>);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;bean;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">private</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">static</span>&nbsp;<span class=\"hljs-class\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">class</span>&nbsp;<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">DestructionAwareBeanPostProcessorCls</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">implements</span>&nbsp;<span class=\"hljs-title\" style=\"color: #e6c07b; line-height: 26px;\">DestructionAwareBeanPostProcessor</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">void</span>&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">postProcessBeforeDestruction</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Object&nbsp;bean,&nbsp;String&nbsp;beanName)</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">throws</span>&nbsp;BeansException&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;这里实现销毁对象的逻辑</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"-&nbsp;9.&nbsp;DestructionAwareBeanPostProcessor.postProcessBeforeDestruction:&nbsp;\"</span>&nbsp;+&nbsp;beanName&nbsp;+&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\",&nbsp;\"</span>&nbsp;+&nbsp;bean);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-meta\" style=\"color: #61aeee; line-height: 26px;\">@Override</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-function\" style=\"line-height: 26px;\"><span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">public</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">boolean</span>&nbsp;<span class=\"hljs-title\" style=\"color: #61aeee; line-height: 26px;\">requiresDestruction</span><span class=\"hljs-params\" style=\"line-height: 26px;\">(Object&nbsp;bean)</span>&nbsp;</span>{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-comment\" style=\"color: #5c6370; font-style: italic; line-height: 26px;\">//&nbsp;判断是否需要处理这个对象的销毁</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;System.out.println(<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">\"-&nbsp;9.&nbsp;DestructionAwareBeanPostProcessor.requiresDestruction:&nbsp;\"</span>&nbsp;+&nbsp;bean);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">return</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">true</span>;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}<br></code></pre> \n<h2 data-tool=\"mdnice编辑器\" style=\"border-bottom-color: rgb(239, 112, 96); margin-top: 30px; margin-bottom: 15px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; align-items: unset; background-attachment: scroll; background-clip: border-box; background-color: unset; background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; border-top-style: none; border-bottom-style: solid; border-left-style: none; border-right-style: none; border-top-width: 1px; border-bottom-width: 2px; border-left-width: 1px; border-right-width: 1px; border-top-color: rgb(0, 0, 0); border-left-color: rgb(0, 0, 0); border-right-color: rgb(0, 0, 0); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-left-radius: 0px; border-bottom-right-radius: 0px; box-shadow: none; display: flex; flex-direction: unset; float: unset; height: auto; justify-content: unset; line-height: 1.1em; overflow-x: unset; overflow-y: unset; position: relative; text-align: left; text-shadow: none; transform: none; width: auto; -webkit-box-reflect: unset;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"font-size: 22px; color: rgb(255, 255, 255); background-color: rgb(239, 112, 96); line-height: 1.5em; letter-spacing: 0em; align-items: unset; background-attachment: scroll; background-clip: border-box; background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-right-width: 1px; border-top-color: rgb(0, 0, 0); border-bottom-color: rgb(0, 0, 0); border-left-color: rgb(0, 0, 0); border-right-color: rgb(0, 0, 0); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-left-radius: 0px; border-bottom-right-radius: 0px; box-shadow: none; display: inline-block; font-weight: bold; flex-direction: unset; float: unset; height: auto; justify-content: unset; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 5px; overflow-x: unset; overflow-y: unset; padding-top: 3px; padding-bottom: 1px; padding-left: 10px; padding-right: 10px; position: relative; text-align: left; text-indent: 0em; text-shadow: none; transform: none; width: auto; -webkit-box-reflect: unset;\">二、日志输出</span><span class=\"suffix\" style=\"display: none;\"></span><span style=\"border-bottom-color: rgb(239, 235, 233); align-items: unset; background-attachment: scroll; background-clip: border-box; background-color: unset; background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; border-top-style: none; border-bottom-style: solid; border-left-style: none; border-right-style: solid; border-top-width: 1px; border-bottom-width: 36px; border-left-width: 1px; border-right-width: 20px; border-top-color: rgb(0, 0, 0); border-left-color: rgb(0, 0, 0); border-right-color: transparent; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-left-radius: 0px; border-bottom-right-radius: 0px; box-shadow: none; color: rgb(0, 0, 0); display: inline-block; font-size: 16px; font-weight: bold; flex-direction: unset; float: unset; height: auto; justify-content: unset; letter-spacing: 0px; line-height: 1.1em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; overflow-x: unset; overflow-y: unset; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; position: relative; text-align: left; text-indent: 0em; text-shadow: none; transform: none; width: auto; -webkit-box-reflect: unset;\"> </span></h2> \n<h3 data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; display: block;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"font-size: 20px; color: rgb(0, 0, 0); line-height: 1.5em; letter-spacing: 0em; text-align: left; font-weight: bold; display: block;\">1、Spring初始化日志</span><span class=\"suffix\" style=\"display: none;\"></span></h3> \n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left; margin-top: 10px; margin-bottom: 10px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; padding-top: 15px; background: #282c34; border-radius: 5px; display: -webkit-box; font-family: Consolas, Monaco, Menlo, monospace; font-size: 12px;\"><span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">22</span>:<span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">25</span>:<span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">55.634</span>&nbsp;[main]&nbsp;DEBUG&nbsp;org.springframework.context.annotation.AnnotationConfigApplicationContext&nbsp;-&nbsp;Refreshing&nbsp;org.springframework.context.annotation.AnnotationConfigApplicationContext@<span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">4</span>fccd51b<br><span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">22</span>:<span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">25</span>:<span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">55.662</span>&nbsp;[main]&nbsp;DEBUG&nbsp;org.springframework.beans.factory.support.DefaultListableBeanFactory&nbsp;-&nbsp;Creating&nbsp;shared&nbsp;instance&nbsp;of&nbsp;singleton&nbsp;bean&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">'org.springframework.context.annotation.internalConfigurationAnnotationProcessor'</span><br><span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">22</span>:<span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">25</span>:<span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">55.784</span>&nbsp;[main]&nbsp;DEBUG&nbsp;org.springframework.beans.factory.support.DefaultListableBeanFactory&nbsp;-&nbsp;Creating&nbsp;shared&nbsp;instance&nbsp;of&nbsp;singleton&nbsp;bean&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">'org.springframework.context.event.internalEventListenerProcessor'</span><br><span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">22</span>:<span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">25</span>:<span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">55.788</span>&nbsp;[main]&nbsp;DEBUG&nbsp;org.springframework.beans.factory.support.DefaultListableBeanFactory&nbsp;-&nbsp;Creating&nbsp;shared&nbsp;instance&nbsp;of&nbsp;singleton&nbsp;bean&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">'org.springframework.context.event.internalEventListenerFactory'</span><br><span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">22</span>:<span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">25</span>:<span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">55.790</span>&nbsp;[main]&nbsp;DEBUG&nbsp;org.springframework.beans.factory.support.DefaultListableBeanFactory&nbsp;-&nbsp;Creating&nbsp;shared&nbsp;instance&nbsp;of&nbsp;singleton&nbsp;bean&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">'org.springframework.context.annotation.internalAutowiredAnnotationProcessor'</span><br><span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">22</span>:<span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">25</span>:<span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">55.793</span>&nbsp;[main]&nbsp;DEBUG&nbsp;org.springframework.beans.factory.support.DefaultListableBeanFactory&nbsp;-&nbsp;Creating&nbsp;shared&nbsp;instance&nbsp;of&nbsp;singleton&nbsp;bean&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">'org.springframework.context.annotation.internalCommonAnnotationProcessor'</span><br><span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">22</span>:<span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">25</span>:<span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">55.800</span>&nbsp;[main]&nbsp;DEBUG&nbsp;org.springframework.beans.factory.support.DefaultListableBeanFactory&nbsp;-&nbsp;Creating&nbsp;shared&nbsp;instance&nbsp;of&nbsp;singleton&nbsp;bean&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">'beanPostProcessorCls'</span><br><span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">22</span>:<span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">25</span>:<span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">55.802</span>&nbsp;[main]&nbsp;DEBUG&nbsp;org.springframework.beans.factory.support.DefaultListableBeanFactory&nbsp;-&nbsp;Creating&nbsp;shared&nbsp;instance&nbsp;of&nbsp;singleton&nbsp;bean&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">'beanLifeCycleTest'</span><br><span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">22</span>:<span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">25</span>:<span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">55.810</span>&nbsp;[main]&nbsp;INFO&nbsp;org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker&nbsp;-&nbsp;Bean&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">'beanLifeCycleTest'</span>&nbsp;of&nbsp;type&nbsp;[site.xiaokui.db.spring.BeanLifeCycleTest]&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">is</span>&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">not</span>&nbsp;eligible&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">for</span>&nbsp;getting&nbsp;processed&nbsp;by&nbsp;all&nbsp;BeanPostProcessors&nbsp;(<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">for</span>&nbsp;example:&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">not</span>&nbsp;eligible&nbsp;<span class=\"hljs-keyword\" style=\"color: #c678dd; line-height: 26px;\">for</span>&nbsp;auto-proxying)<br><span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">22</span>:<span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">25</span>:<span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">55.813</span>&nbsp;[main]&nbsp;DEBUG&nbsp;org.springframework.beans.factory.support.DefaultListableBeanFactory&nbsp;-&nbsp;Creating&nbsp;shared&nbsp;instance&nbsp;of&nbsp;singleton&nbsp;bean&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">'instantiationAwareBeanPostProcessorCls'</span><br><span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">22</span>:<span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">25</span>:<span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">55.814</span>&nbsp;[main]&nbsp;DEBUG&nbsp;org.springframework.beans.factory.support.DefaultListableBeanFactory&nbsp;-&nbsp;Creating&nbsp;shared&nbsp;instance&nbsp;of&nbsp;singleton&nbsp;bean&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">'smartInstantiationAwareBeanPostProcessorCls'</span><br><span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">22</span>:<span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">25</span>:<span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">55.816</span>&nbsp;[main]&nbsp;DEBUG&nbsp;org.springframework.beans.factory.support.DefaultListableBeanFactory&nbsp;-&nbsp;Creating&nbsp;shared&nbsp;instance&nbsp;of&nbsp;singleton&nbsp;bean&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">'mergedBeanDefinitionPostProcessorCls'</span><br><span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">22</span>:<span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">25</span>:<span class=\"hljs-number\" style=\"color: #d19a66; line-height: 26px;\">55.816</span>&nbsp;[main]&nbsp;DEBUG&nbsp;org.springframework.beans.factory.support.DefaultListableBeanFactory&nbsp;-&nbsp;Creating&nbsp;shared&nbsp;instance&nbsp;of&nbsp;singleton&nbsp;bean&nbsp;<span class=\"hljs-string\" style=\"color: #98c379; line-height: 26px;\">'destructionAwareBeanPostProcessorCls'</span><br></code></pre> \n<h3 data-tool=\"mdnice编辑器\" style=\"margin-top: 30px; margin-bottom: 15px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; display: block;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"font-size: 20px; color: rgb(0, 0, 0); line-height: 1.5em; letter-spacing: 0em; text-align: left; font-weight: bold; display: block;\">2、自定义输出</span><span class=\"suffix\" style=\"display: none;\"></span></h3> \n<pre class=\"custom\" data-tool=\"mdnice编辑器\" style=\"border-radius: 5px; box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px; text-align: left; margin-top: 10px; margin-bottom: 10px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px;\"><span style=\"display: block; background: url(https://files.mdnice.com/user/3441/876cad08-0422-409d-bb5a-08afec5da8ee.svg); height: 30px; width: 100%; background-size: 40px; background-repeat: no-repeat; background-color: #282c34; margin-bottom: -7px; border-radius: 5px; background-position: 10px 10px;\"></span><code class=\"hljs\" style=\"overflow-x: auto; padding: 16px; color: #abb2bf; padding-top: 15px; background: #282c34; border-radius: 5px; display: -webkit-box; font-family: Consolas, Monaco, Menlo, monospace; font-size: 12px;\"># 初始化 Animal\n- 1. SmartInstantiationAwareBeanPostProcessor.predictBeanType:预测Bean类型: panda, class site.xiaokui.db.spring.BeanLifeCycleTest$Animal\n- 1. SmartInstantiationAwareBeanPostProcessor.predictBeanType:预测Bean类型: panda, class site.xiaokui.db.spring.BeanLifeCycleTest$Animal\n22:19:54.838 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean 'panda'\n- 2. InstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation:实例化之前: panda, class site.xiaokui.db.spring.BeanLifeCycleTest$Animal\n- 3. Animal init：国宝熊猫\n- 4. MergedBeanDefinitionPostProcessor.postProcessMergedBeanDefinition:处理MergedBeanDefinition: panda, class site.xiaokui.db.spring.BeanLifeCycleTest$Animal, Root bean: class [null]; scope=singleton; abstract=false; lazyInit=null; autowireMode=3; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=beanLifeCycleTest; factoryMethodName=panda; initMethodName=null; destroyMethodName=(inferred); defined in site.xiaokui.db.spring.BeanLifeCycleTest\n- 5. InstantiationAwareBeanPostProcessor.postProcessAfterInstantiation:实例化完成之后: panda, animal name is 国宝熊猫\n- 6. InstantiationAwareBeanPostProcessor.postProcessProperties:开始注入/填充属性: panda, animal name is 国宝熊猫, PropertyValues: length=0\n- 7. BeanPostProcessor.postProcessBeforeInitialization:BeanPostProcessor:实例化完成，初始化开始: panda, animal name is 国宝熊猫\n- 8. BeanPostProcessor.postProcessAfterInitialization:初始化结束\n- 9. DestructionAwareBeanPostProcessor.requiresDestruction: animal name is 国宝熊猫\n- 9. DestructionAwareBeanPostProcessor.requiresDestruction: animal name is 国宝熊猫\n22:19:54.888 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory - Creating shared instance of singleton bean 'testBean'\n\n# 初始化 TestBean\n- 2. InstantiationAwareBeanPostProcessor.postProcessBeforeInstantiation:实例化之前: testBean, class site.xiaokui.db.spring.BeanLifeCycleTest$TestBean\n- 3. SmartInstantiationAwareBeanPostProcessor.determineCandidateConstructors:确定候选构造器: testBean, class site.xiaokui.db.spring.BeanLifeCycleTest$TestBean\n- 4. MergedBeanDefinitionPostProcessor.postProcessMergedBeanDefinition:处理MergedBeanDefinition: testBean, class site.xiaokui.db.spring.BeanLifeCycleTest$TestBean, Root bean: class [site.xiaokui.db.spring.BeanLifeCycleTest$TestBean]; scope=singleton; abstract=false; lazyInit=null; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null\n- 5. InstantiationAwareBeanPostProcessor.postProcessAfterInstantiation:实例化完成之后: testBean, animal name is null\n- 6. InstantiationAwareBeanPostProcessor.postProcessProperties:开始注入/填充属性: testBean, animal name is null, PropertyValues: length=0\n- 1. SmartInstantiationAwareBeanPostProcessor.predictBeanType:预测Bean类型: testBean, class site.xiaokui.db.spring.BeanLifeCycleTest$TestBean\n- 1. SmartInstantiationAwareBeanPostProcessor.predictBeanType:预测Bean类型: testBean, class site.xiaokui.db.spring.BeanLifeCycleTest$TestBean\n- 7. BeanPostProcessor.postProcessBeforeInitialization:BeanPostProcessor:实例化完成，初始化开始: testBean, animal name is 国宝熊猫\n- get a animal: 国宝熊猫\n- 8. InitializingBean.afterPropertiesSet:已经激活Aware接口且bean所有属性已设置完毕\n- 8. BeanPostProcessor.postProcessAfterInitialization:初始化结束\n- 9. DestructionAwareBeanPostProcessor.requiresDestruction: animal name is 国宝熊猫\n</code></pre> \n<h2 data-tool=\"mdnice编辑器\" style=\"border-bottom-color: rgb(239, 112, 96); margin-top: 30px; margin-bottom: 15px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; align-items: unset; background-attachment: scroll; background-clip: border-box; background-color: unset; background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; border-top-style: none; border-bottom-style: solid; border-left-style: none; border-right-style: none; border-top-width: 1px; border-bottom-width: 2px; border-left-width: 1px; border-right-width: 1px; border-top-color: rgb(0, 0, 0); border-left-color: rgb(0, 0, 0); border-right-color: rgb(0, 0, 0); border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-left-radius: 0px; border-bottom-right-radius: 0px; box-shadow: none; display: flex; flex-direction: unset; float: unset; height: auto; justify-content: unset; line-height: 1.1em; overflow-x: unset; overflow-y: unset; position: relative; text-align: left; text-shadow: none; transform: none; width: auto; -webkit-box-reflect: unset;\"><span class=\"prefix\" style=\"display: none;\"></span><span class=\"content\" style=\"font-size: 22px; color: rgb(255, 255, 255); background-color: rgb(239, 112, 96); line-height: 1.5em; letter-spacing: 0em; align-items: unset; background-attachment: scroll; background-clip: border-box; background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-right-width: 1px; border-top-color: rgb(0, 0, 0); border-bottom-color: rgb(0, 0, 0); border-left-color: rgb(0, 0, 0); border-right-color: rgb(0, 0, 0); border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-left-radius: 0px; border-bottom-right-radius: 0px; box-shadow: none; display: inline-block; font-weight: bold; flex-direction: unset; float: unset; height: auto; justify-content: unset; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 5px; overflow-x: unset; overflow-y: unset; padding-top: 3px; padding-bottom: 1px; padding-left: 10px; padding-right: 10px; position: relative; text-align: left; text-indent: 0em; text-shadow: none; transform: none; width: auto; -webkit-box-reflect: unset;\">三、总结</span><span class=\"suffix\" style=\"display: none;\"></span><span style=\"border-bottom-color: rgb(239, 235, 233); align-items: unset; background-attachment: scroll; background-clip: border-box; background-color: unset; background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; border-top-style: none; border-bottom-style: solid; border-left-style: none; border-right-style: solid; border-top-width: 1px; border-bottom-width: 36px; border-left-width: 1px; border-right-width: 20px; border-top-color: rgb(0, 0, 0); border-left-color: rgb(0, 0, 0); border-right-color: transparent; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-left-radius: 0px; border-bottom-right-radius: 0px; box-shadow: none; color: rgb(0, 0, 0); display: inline-block; font-size: 16px; font-weight: bold; flex-direction: unset; float: unset; height: auto; justify-content: unset; letter-spacing: 0px; line-height: 1.1em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; overflow-x: unset; overflow-y: unset; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; position: relative; text-align: left; text-indent: 0em; text-shadow: none; transform: none; width: auto; -webkit-box-reflect: unset;\"> </span></h2> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">纸上得来终觉浅，绝知此事须躬行。花点时间，跟下代码和日志，你也会有自己的理解。</p> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(51, 51, 51); font-size: 15px; line-height: 1.6; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px; font-family: 'Open Sans', 'Clear Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\">下篇我们将详细分析Spring MVC与Servlet标准的整合，以及WebApplicationContext在Spring的应用。</p>",
                "title": "Spring源码(十)：Spring MVC之Bean的生命周期",
                "categoryId": 1,
                "categoryName": "后端",
                "tagId": 101,
                "tagName": "Java",
                "userId": 22324,
                "userOutId": "674354023818",
                "username": "年轻真好1997",
                "avatar": "http://thirdwx.qlogo.cn/mmopen/RtaPOQGxiaviciauZEGQXNGyialgbicibicVwibN1URYrILZreTMYlluGT3q4RKRFvPRW4NXpAxHXDpCqJJibAfjWatjam2XHicpjwo4gk/132",
                "description": "Bean大家应该都了解，鉴于前面的文章介绍的细节过于纵向，因此我们单独开一篇文章介绍SpringBean的全生命周期。从横向的视角，来看看在Bean初始化、填充属性、实例化的各个环节，我们都可以做哪些",
                "level": 1,
                "publishTime": "2024/10/16",
                "readingNum": 5,
                "likeNum": 0,
                "introduction": null,
                "followWords": null,
                "followPic": null,
                "isFollowing": false,
                "isLike": false,
                "isSelf": false,
                "type": 1,
                "isVisible": true,
                "invisibleReason": null,
                "writingColumn": {
                    "columnOutId": "9d41b0435f2643d3b8c1fa5030265cbe",
                    "name": "默认专栏",
                    "briefIntro": "这是一个默认专栏",
                    "cover": "https://files.mdnice.com/common/community/default-column-cover.jpg",
                    "writingNum": 12,
                    "createTime": "2024-08-06 19:06"
                }
            }
        },
        "__N_SSP": true
    },
    "page": "/writing/[id]",
    "query": {
        "id": "9b3da4cd59af416cb267e523281b6b9e"
    },
    "buildId": "ErZPkD4oq6iwH2nj6Dpcx",
    "isFallback": false,
    "gssp": true,
    "appGip": true
}