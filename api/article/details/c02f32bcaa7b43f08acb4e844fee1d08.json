{
    "props": {
        "pageProps": {
            "query": {
                "id": "c02f32bcaa7b43f08acb4e844fee1d08"
            },
            "ieBrowser": false,
            "needRefresh": false,
            "writingDetail": {
                "id": 86046,
                "outId": "c02f32bcaa7b43f08acb4e844fee1d08",
                "articleOutId": "c02f32bcaa7b43f08acb4e844fee1d08",
                "html": "<p data-tool=\"mdnice编辑器\" style=\"color: rgb(0, 0, 0); font-size: 16px; line-height: 1.8em; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px;\">你可以在 React 中使用 useState 和 useEffect 来管理请求逻辑，同时使用 setTimeout 来控制网络请求和本地翻译的恢复。可以通过以下步骤实现：</p> \n<pre data-tool=\"mdnice编辑器\"><code>1.\t首先尝试本地翻译请求。\n2.\t如果本地翻译失败两次，则在10秒内尝试网络请求。\n3.\t如果网络请求未在10秒内完成，则自动切换回本地翻译。\n</code></pre> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(0, 0, 0); font-size: 16px; line-height: 1.8em; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px;\">以下是一个示例实现：</p> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(0, 0, 0); font-size: 16px; line-height: 1.8em; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px;\">import { useState, useEffect } from 'react';</p> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(0, 0, 0); font-size: 16px; line-height: 1.8em; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px;\">function useTranslate(text) { const [translation, setTranslation] = useState(null); const [errorCount, setErrorCount] = useState(0); const [useNetwork, setUseNetwork] = useState(false);</p> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(0, 0, 0); font-size: 16px; line-height: 1.8em; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px;\">// 模拟本地翻译请求 const localTranslate = async () =&gt; { return new Promise((resolve, reject) =&gt; { const success = Math.random() &gt; 0.5; // 模拟成功/失败 setTimeout(() =&gt; { success ? resolve(<code style=\"color: rgb(30, 107, 184); font-size: 14px; line-height: 1.8em; letter-spacing: 0em; background-attachment: scroll; background-clip: border-box; background-color: rgba(27, 31, 35, 0.05); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 2px; margin-right: 2px; padding-top: 2px; padding-bottom: 2px; padding-left: 4px; padding-right: 4px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgb(0, 0, 0); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; overflow-wrap: break-word; font-family: Consolas, Monaco, Menlo, monospace; word-break: break-all;\">本地翻译：${text}</code>) : reject('本地翻译失败'); }, 500); // 模拟本地翻译请求延时 }); };</p> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(0, 0, 0); font-size: 16px; line-height: 1.8em; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px;\">// 模拟网络翻译请求 const networkTranslate = async () =&gt; { return new Promise((resolve) =&gt; { setTimeout(() =&gt; { resolve(<code style=\"color: rgb(30, 107, 184); font-size: 14px; line-height: 1.8em; letter-spacing: 0em; background-attachment: scroll; background-clip: border-box; background-color: rgba(27, 31, 35, 0.05); background-image: none; background-origin: padding-box; background-position-x: 0%; background-position-y: 0%; background-repeat: no-repeat; background-size: auto; width: auto; height: auto; margin-top: 0px; margin-bottom: 0px; margin-left: 2px; margin-right: 2px; padding-top: 2px; padding-bottom: 2px; padding-left: 4px; padding-right: 4px; border-top-style: none; border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-width: 3px; border-bottom-width: 3px; border-left-width: 3px; border-right-width: 3px; border-top-color: rgb(0, 0, 0); border-bottom-color: rgba(0, 0, 0, 0.4); border-left-color: rgba(0, 0, 0, 0.4); border-right-color: rgba(0, 0, 0, 0.4); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; overflow-wrap: break-word; font-family: Consolas, Monaco, Menlo, monospace; word-break: break-all;\">网络翻译：${text}</code>); }, 1000); // 模拟网络请求延时 }); };</p> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(0, 0, 0); font-size: 16px; line-height: 1.8em; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px;\">// 翻译请求的主函数 const handleTranslation = async () =&gt; { try { if (useNetwork) { const result = await networkTranslate(); setTranslation(result); setErrorCount(0); // 成功后重置错误计数 setUseNetwork(false); // 恢复到本地翻译模式 } else { const result = await localTranslate(); setTranslation(result); setErrorCount(0); // 成功后重置错误计数 } } catch (error) { setErrorCount(prev =&gt; prev + 1); // 增加错误计数 } };</p> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(0, 0, 0); font-size: 16px; line-height: 1.8em; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px;\">// 处理错误计数和网络请求切换 useEffect(() =&gt; { if (errorCount &lt; 2) { handleTranslation(); } else { setUseNetwork(true); // 启用网络请求 const timer = setTimeout(() =&gt; { setUseNetwork(false); // 10秒后恢复本地请求 setErrorCount(0); // 重置错误计数 }, 10000);</p> \n<pre data-tool=\"mdnice编辑器\"><code>  // 清除定时器\n  return () =&gt; clearTimeout(timer);\n}\n</code></pre> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(0, 0, 0); font-size: 16px; line-height: 1.8em; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px;\">}, [errorCount, text, useNetwork]); // 监听 errorCount, text, 和 useNetwork 的变化</p> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(0, 0, 0); font-size: 16px; line-height: 1.8em; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px;\">return translation; }</p> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(0, 0, 0); font-size: 16px; line-height: 1.8em; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px;\">// 使用示例组件 function TranslateComponent({ text }) { const translation = useTranslate(text);</p> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(0, 0, 0); font-size: 16px; line-height: 1.8em; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px;\">return ( </p> \n<div data-tool=\"mdnice编辑器\"> \n <h2 style=\"margin-top: 30px; margin-bottom: 15px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; display: block;\">输入文本: <ruby>text}</ruby></h2> \n <h3 style=\"margin-top: 30px; margin-bottom: 15px; margin-left: 0px; margin-right: 0px; padding-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; display: block;\">翻译结果: {translation | '正在翻译中...'</h3> \n</div> ); } \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(0, 0, 0); font-size: 16px; line-height: 1.8em; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px;\"></p> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(0, 0, 0); font-size: 16px; line-height: 1.8em; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px;\">export default TranslateComponent;</p> \n<p data-tool=\"mdnice编辑器\" style=\"color: rgb(0, 0, 0); font-size: 16px; line-height: 1.8em; letter-spacing: 0em; text-align: left; text-indent: 0em; margin-top: 0px; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; padding-top: 8px; padding-bottom: 8px; padding-left: 0px; padding-right: 0px;\">代码说明</p> \n<pre data-tool=\"mdnice编辑器\"><code>•\tlocalTranslate 和 networkTranslate：分别模拟本地和网络翻译请求。\n•\terrorCount：记录本地请求失败次数。\n•\tuseNetwork：标记是否切换到网络翻译模式。\n•\thandleTranslation：根据 useNetwork 的值选择本地或网络翻译，网络翻译成功后恢复本地模式。\n•\tuseEffect：当 errorCount 达到 2 时，设置 useNetwork 为 true 开启网络请求。启动 10 秒的定时器，在10秒后重置 useNetwork 和 errorCount。\n</code></pre>",
                "title": "dddd",
                "categoryId": 1,
                "categoryName": "后端",
                "tagId": 100,
                "tagName": "后端",
                "userId": 3253,
                "userOutId": "246644673156",
                "username": "。残颜",
                "avatar": "https://files.mdnice.com/pic/dab7e081-233e-420e-8dde-2275c3e1e2aa.jpeg",
                "description": "你可以在React中使用useState和useEffect来管理请求逻辑，同时使用setTimeout来控制网络请求和本地翻译的恢复。可以通过以下步骤实现：1.首先尝试本地翻译请求。2.如果本地翻译",
                "level": 1,
                "publishTime": "2024/11/04",
                "readingNum": 7,
                "likeNum": 0,
                "introduction": "公众号：君伟说。",
                "followWords": "欢迎关注公众号。",
                "followPic": "https://files.mdnice.com/pic/6b609a0b-eb7a-480a-9b9d-266b0b792ce9.jpeg",
                "isFollowing": false,
                "isLike": false,
                "isSelf": false,
                "type": 1,
                "isVisible": true,
                "invisibleReason": null,
                "writingColumn": {
                    "columnOutId": "6e5824db7b3f4ba8926dfa068596c260",
                    "name": "默认专栏",
                    "briefIntro": "这是一个默认专栏",
                    "cover": "https://files.mdnice.com/common/community/default-column-cover.jpg",
                    "writingNum": 23,
                    "createTime": "2024-08-06 19:08"
                }
            }
        },
        "__N_SSP": true
    },
    "page": "/writing/[id]",
    "query": {
        "id": "c02f32bcaa7b43f08acb4e844fee1d08"
    },
    "buildId": "ErZPkD4oq6iwH2nj6Dpcx",
    "isFallback": false,
    "gssp": true,
    "appGip": true
}